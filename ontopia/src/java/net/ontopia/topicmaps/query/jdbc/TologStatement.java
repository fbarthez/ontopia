
// $Id: TologStatement.java,v 1.2 2007/11/13 12:45:23 geir.gronmo Exp $

package net.ontopia.topicmaps.query.jdbc;

import java.sql.*;
import java.util.Map;

/**
 * INTERNAL: 
 */

public class TologStatement implements Statement {

  TologConnection conn;
  TologResultSet rs;
  
  public TologStatement(TologConnection conn) {
    this.conn = conn;
  }

  public TologStatement(TologConnection conn, int resultSetType, int resultSetConcurrency) {
    this.conn = conn;
  }

  public int getFetchDirection()
    throws SQLException {
    return ResultSet.FETCH_FORWARD;
  }

  public int getFetchSize()
    throws SQLException {
    return 0;
  }

  public int getMaxFieldSize()
    throws SQLException {
    return Integer.MAX_VALUE;
  }

  public int getMaxRows()
    throws SQLException {
    return Integer.MAX_VALUE;
  }

  public boolean getMoreResults()
    throws SQLException {
    return false; // there is just one result
  }

  public int getQueryTimeout()
    throws SQLException {
    return 0;
  }

  public int getResultSetConcurrency()
    throws SQLException {
    return ResultSet.CONCUR_READ_ONLY;
  }

  public int getResultSetType()
    throws SQLException {
    return ResultSet.TYPE_FORWARD_ONLY;
  }

  public int getUpdateCount()
    throws SQLException {
    return 0;
  }

  public void cancel()
    throws SQLException {
    // ignore
  }

  public void clearBatch()
    throws SQLException {
    // ignore
  }

  public void clearWarnings()
    throws SQLException {
    // ignore
  }

  public void close()
    throws SQLException {
    if (rs != null) rs.close();
  }

  public void setFetchDirection(int fetchDirection)
    throws SQLException {
    // ignore
  }

  public void setFetchSize(int fetchSize)
    throws SQLException {
    // ignore
  }

  public void setMaxFieldSize(int maxFieldSize)
    throws SQLException {
    // ignore
  }

  public void setMaxRows(int maxRows)
    throws SQLException {
    // ignore
  }

  public void setQueryTimeout(int queryTimeout)
    throws SQLException {
    // ignore
  }

  public void setEscapeProcessing(boolean escapeProcessing)
    throws SQLException {
    // ignore
  }

  public int executeUpdate(String sql)
    throws SQLException {
    throw new SQLException("Not supported: executeUpdate(String)");
  }

  public void addBatch(String sql)
    throws SQLException {
    throw new SQLException("Not supported: addBatch(String)");
  }

  public void setCursorName(String cursorName)
    throws SQLException {
    // ignore
  }

  public boolean execute(String sql)
    throws SQLException {
    executeQuery(sql);
    return true;
  }

  public Connection getConnection()
    throws SQLException {
    return conn;
  }

  public ResultSet getResultSet()
    throws SQLException {
    return this.rs;
  }

  public SQLWarning getWarnings()
    throws SQLException {
    // todo
    return null;
  }

  public ResultSet executeQuery(String sql)
    throws SQLException {
    this.rs = conn.executeQuery(this, sql);
    return this.rs;
  }

  public int[] executeBatch()
    throws SQLException {
    throw new SQLException("Not supported: executeBatch()");
  }

  // J2EE 1.4

  //! public int getResultSetHoldability()
  //!   throws SQLException {
  //!   return stm.getResultSetHoldability();
  //! }

  //! public ResultSet getGeneratedKeys()
  //!   throws SQLException {
  //!   return new TologResultSet(this, "ResultSet.getGeneratedKeys()", stm.getGeneratedKeys());
  //! }

  //! public boolean getMoreResults(int moreResults)
  //!   throws SQLException {
  //!   return stm.getMoreResults(moreResults);
  //! }

  //! public boolean execute(String sql, String[] columnNames)
  //!   throws SQLException {
  //!   return stm.execute(sql, columnNames);
  //! }

  //! public boolean execute(String sql, int[] columnIndexes)
  //!   throws SQLException {
  //!   return stm.execute(sql, columnIndexes);
  //! }

  //! public int executeUpdate(String sql, int[] columnIndexes)
  //!   throws SQLException {
  //!   return stm.executeUpdate(sql, columnIndexes);
  //! }

  //! public int executeUpdate(String sql, String[] columnNames)
  //!   throws SQLException {
  //!   return stm.executeUpdate(sql, columnNames);
  //! }
  
  //! public int executeUpdate(String sql, int autoGeneratedKeys)
  //!   throws SQLException {
  //!   return stm.executeUpdate(sql, autoGeneratedKeys);
  //! }
  //! 
  //! public boolean execute(String sql, int autoGeneratedKeys)
  //!   throws SQLException {
  //!   return stm.execute(sql, autoGeneratedKeys);
  //! }

  // --- Helpers

  void close(ResultSet rs) {
    this.rs = null;
  }
  
}
