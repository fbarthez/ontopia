/* The following code was generated by JFlex 1.4.3 on 4/27/09 1:16 PM */


// $Id: ctm.flex,v 1.2 2009/04/27 11:04:17 lars.garshol Exp $

package net.ontopia.topicmaps.utils.ctm;

import antlr.*;
import net.ontopia.topicmaps.xml.InvalidTopicMapException;

// To get ANTLR token types generated for parser.

/**
 * A CTM lexer, to be used with the Antlr-generated parser.
 */

public class CTMLexer implements TokenStream {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\23"+
    "\1\4\1\14\1\32\2\0\1\5\1\6\1\0\1\26\1\55\1\13"+
    "\1\11\1\16\1\31\1\30\10\10\1\7\1\17\1\21\1\57\1\22"+
    "\1\63\1\56\6\24\15\12\1\27\1\66\5\12\1\61\1\64\1\20"+
    "\1\62\1\12\1\0\1\53\1\25\1\35\1\37\1\33\1\46\1\41"+
    "\1\15\1\40\1\15\1\54\1\50\1\52\1\34\1\36\1\45\1\15"+
    "\1\43\1\44\1\65\1\51\1\42\1\15\1\47\2\15\3\0\1\60"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\10\1\12\1\13\1\1"+
    "\1\14\1\1\1\6\1\1\4\10\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\1\2\0"+
    "\1\6\3\0\1\6\1\26\11\0\4\10\1\27\1\30"+
    "\1\31\1\32\1\33\1\0\1\34\1\35\1\0\2\2"+
    "\2\0\1\6\1\36\2\37\2\0\1\40\1\0\1\41"+
    "\5\0\1\42\1\43\1\44\1\45\6\0\1\2\1\6"+
    "\1\0\1\46\10\0\1\2\13\0\1\47\5\0\1\50"+
    "\5\0\1\51\4\0\1\52\1\53\1\0\1\54\1\0"+
    "\1\55\1\56\1\57\10\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\334\0\156\0\156"+
    "\0\156\0\u0113\0\156\0\u014a\0\u0181\0\u01b8\0\u01ef\0\156"+
    "\0\156\0\u0226\0\u025d\0\u0181\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\156\0\156\0\156\0\156\0\156\0\u03de"+
    "\0\u0415\0\156\0\156\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528"+
    "\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\156\0\u0906\0\156\0\156\0\156\0\u093d\0\156"+
    "\0\156\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0528"+
    "\0\u0abe\0\u0af5\0\u0604\0\u0b2c\0\156\0\u0b63\0\u0528\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u01ef\0\u01ef\0\u01ef\0\u01ef"+
    "\0\u0906\0\u0cad\0\u0ce4\0\u09e2\0\u0d1b\0\u0d52\0\u0a19\0\u0d89"+
    "\0\u0af5\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0d1b\0\u0faf\0\u0dc0\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\156\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\156\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\156\0\u13fb\0\u1432\0\u1469\0\u14a0\0\156"+
    "\0\156\0\u14d7\0\156\0\u150e\0\156\0\156\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\3\1\20\1\21"+
    "\1\22\1\3\1\23\1\14\1\17\1\24\1\14\1\25"+
    "\1\12\1\26\1\27\3\17\1\30\1\31\12\17\1\32"+
    "\1\17\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\3\1\17\1\14\23\42\1\43\40\42\1\44\2\42"+
    "\71\0\1\5\64\0\1\45\1\4\1\5\2\45\1\46"+
    "\61\45\10\0\1\47\1\50\16\0\2\47\44\0\1\51"+
    "\1\14\1\52\2\14\1\0\1\14\6\0\2\14\1\0"+
    "\3\14\1\0\22\14\10\0\2\14\10\0\1\53\17\0"+
    "\2\53\47\0\1\54\2\0\1\54\6\0\2\54\1\0"+
    "\1\54\3\0\22\54\10\0\2\54\7\0\1\55\1\14"+
    "\1\52\2\14\1\0\1\17\6\0\1\14\1\17\1\0"+
    "\3\14\1\0\22\17\10\0\1\17\1\14\22\56\1\0"+
    "\44\56\23\0\1\57\53\0\1\47\1\60\16\0\2\47"+
    "\70\0\1\61\4\0\1\62\1\0\1\63\2\0\1\64"+
    "\4\0\1\65\23\0\1\55\1\14\1\52\2\14\1\0"+
    "\1\17\6\0\1\14\1\17\1\0\3\14\1\0\1\17"+
    "\1\66\20\17\10\0\1\17\1\14\7\0\1\55\1\14"+
    "\1\52\2\14\1\0\1\17\6\0\1\14\1\17\1\0"+
    "\3\14\1\0\1\67\21\17\10\0\1\17\1\14\7\0"+
    "\1\55\1\14\1\52\2\14\1\0\1\17\6\0\1\14"+
    "\1\17\1\0\3\14\1\0\11\17\1\70\10\17\10\0"+
    "\1\17\1\14\7\0\1\55\1\14\1\52\2\14\1\0"+
    "\1\17\6\0\1\14\1\17\1\0\3\14\1\0\21\17"+
    "\1\71\10\0\1\17\1\14\62\0\1\72\16\0\1\73"+
    "\2\0\1\73\6\0\2\73\1\0\1\73\3\0\22\73"+
    "\10\0\2\73\23\0\1\74\10\0\1\75\6\0\1\76"+
    "\5\0\1\77\12\0\1\100\1\101\1\102\1\45\1\4"+
    "\1\5\64\45\1\46\1\103\1\104\1\46\1\105\1\46"+
    "\1\106\60\46\10\0\1\107\1\50\16\0\2\107\45\0"+
    "\1\110\17\0\2\110\45\0\1\111\1\0\1\112\2\0"+
    "\1\112\6\0\2\112\1\0\1\112\2\111\1\0\22\112"+
    "\10\0\2\112\10\0\1\14\1\52\2\14\1\0\1\14"+
    "\6\0\2\14\1\0\3\14\1\0\22\14\10\0\2\14"+
    "\10\0\1\53\1\50\16\0\2\53\45\0\1\54\1\113"+
    "\2\54\1\0\1\54\6\0\2\54\1\0\3\54\1\0"+
    "\22\54\10\0\2\54\10\0\1\111\1\0\1\112\2\0"+
    "\1\112\1\114\5\0\2\112\1\0\1\112\2\111\1\0"+
    "\22\112\10\0\2\112\22\56\1\115\44\56\23\0\1\116"+
    "\53\0\1\110\17\0\1\110\1\117\71\0\1\120\66\0"+
    "\1\121\65\0\1\122\76\0\1\123\56\0\1\124\42\0"+
    "\1\55\1\14\1\52\2\14\1\0\1\17\6\0\1\14"+
    "\1\17\1\0\3\14\1\0\4\17\1\125\15\17\10\0"+
    "\1\17\1\14\7\0\1\55\1\14\1\52\2\14\1\0"+
    "\1\17\6\0\1\14\1\17\1\0\3\14\1\0\13\17"+
    "\1\126\6\17\10\0\1\17\1\14\7\0\1\55\1\14"+
    "\1\52\2\14\1\0\1\17\6\0\1\14\1\17\1\0"+
    "\3\14\1\0\20\17\1\127\1\17\10\0\1\17\1\14"+
    "\7\0\1\55\1\14\1\52\2\14\1\0\1\17\6\0"+
    "\1\14\1\17\1\0\3\14\1\0\3\17\1\130\16\17"+
    "\10\0\1\17\1\14\10\0\1\73\1\131\2\73\1\0"+
    "\1\73\6\0\2\73\1\0\3\73\1\0\22\73\10\0"+
    "\2\73\10\0\1\132\13\0\2\132\2\0\2\132\1\0"+
    "\1\132\1\0\1\132\1\0\1\132\6\0\1\132\4\0"+
    "\1\132\23\0\1\133\13\0\2\133\2\0\2\133\1\0"+
    "\1\133\1\0\1\133\1\0\1\133\6\0\1\133\4\0"+
    "\1\133\13\0\2\134\1\104\1\134\1\135\1\134\1\136"+
    "\64\134\1\135\1\134\1\136\60\134\1\46\1\103\1\104"+
    "\1\46\1\105\63\46\1\103\1\104\1\46\1\137\1\46"+
    "\1\106\60\46\10\0\1\140\1\50\16\0\2\140\45\0"+
    "\1\111\1\0\2\111\1\0\1\111\6\0\2\111\1\0"+
    "\3\111\1\0\22\111\10\0\2\111\10\0\1\112\1\141"+
    "\2\112\1\0\1\112\6\0\2\112\1\0\3\112\1\0"+
    "\22\112\10\0\2\112\16\0\1\142\50\0\23\116\1\143"+
    "\43\116\35\0\1\144\66\0\1\145\74\0\1\146\56\0"+
    "\1\147\76\0\1\150\33\0\1\151\13\0\2\151\2\0"+
    "\2\151\1\0\1\151\1\0\1\151\1\0\1\151\6\0"+
    "\1\151\4\0\1\151\23\0\1\152\13\0\2\152\2\0"+
    "\2\152\1\0\1\152\1\0\1\152\1\0\1\152\6\0"+
    "\1\152\4\0\1\152\13\0\4\134\1\135\66\134\1\153"+
    "\1\134\1\136\60\134\10\0\1\53\1\50\1\0\1\154"+
    "\14\0\2\53\35\0\1\142\3\0\1\142\1\0\3\142"+
    "\1\155\5\142\1\155\1\0\46\142\23\116\1\156\43\116"+
    "\36\0\1\157\100\0\1\160\62\0\1\161\70\0\1\162"+
    "\61\0\1\163\35\0\1\164\13\0\2\164\2\0\2\164"+
    "\1\0\1\164\1\0\1\164\1\0\1\164\6\0\1\164"+
    "\4\0\1\164\23\0\1\165\13\0\2\165\2\0\2\165"+
    "\1\0\1\165\1\0\1\165\1\0\1\165\6\0\1\165"+
    "\4\0\1\165\23\0\1\166\17\0\2\166\35\0\23\116"+
    "\1\167\43\116\37\0\1\170\100\0\1\171\55\0\1\172"+
    "\66\0\1\173\61\0\1\174\43\0\1\175\13\0\2\175"+
    "\2\0\2\175\1\0\1\175\1\0\1\175\1\0\1\175"+
    "\6\0\1\175\4\0\1\175\23\0\1\176\13\0\2\176"+
    "\2\0\2\176\1\0\1\176\1\0\1\176\1\0\1\176"+
    "\6\0\1\176\4\0\1\176\23\0\1\177\17\0\2\177"+
    "\75\0\1\200\65\0\1\201\65\0\1\202\77\0\1\203"+
    "\71\0\1\204\24\0\1\205\13\0\2\205\2\0\2\205"+
    "\1\0\1\205\1\0\1\205\1\0\1\205\6\0\1\205"+
    "\4\0\1\205\26\0\1\206\107\0\1\207\65\0\1\210"+
    "\67\0\1\211\105\0\1\212\23\0\1\213\13\0\2\213"+
    "\2\0\2\213\1\0\1\213\1\0\1\213\1\0\1\213"+
    "\6\0\1\213\4\0\1\213\23\0\1\214\17\0\2\214"+
    "\76\0\1\215\72\0\1\216\31\0\1\217\17\0\2\217"+
    "\64\0\1\220\47\0\1\221\17\0\2\221\45\0\1\222"+
    "\17\0\2\222\44\0\1\223\67\0\1\224\17\0\2\224"+
    "\45\0\1\225\17\0\2\225\44\0\1\226\67\0\1\227"+
    "\17\0\2\227\45\0\1\230\17\0\2\230\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5940];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\3\11\1\1\1\11"+
    "\4\1\2\11\11\1\5\11\2\1\2\11\1\1\2\0"+
    "\1\1\3\0\2\1\11\0\4\1\1\11\1\1\3\11"+
    "\1\0\2\11\1\0\2\1\2\0\4\1\2\0\1\11"+
    "\1\0\1\1\5\0\4\1\6\0\2\1\1\0\1\1"+
    "\10\0\1\1\13\0\1\11\5\0\1\11\5\0\1\11"+
    "\4\0\2\11\1\0\1\11\1\0\2\11\1\1\10\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private StringBuffer string = new StringBuffer(); // used to gather strings
  
  private String docuri;
  public void setDocuri(String docuri) {
    this.docuri = docuri;
  }
  
  public Token nextToken() {
    try {
      return nextToken2();
    } catch (java.io.IOException e) {
      // FIXME: is this OK?
      return new CommonToken(Token.EOF_TYPE, "END OF FUCKING FILE, OK?");
    }
  }
  
  private Token newToken(int type, String text) {
    CommonToken token = new CommonToken(type, text);
    token.setLine(yyline + 1);
    token.setColumn(yycolumn);
    return token;
  }

  private Token newToken(int type) {
    return newToken(type, yytext());
  }

  private char unhex(int length) {
    int number = 0;
    for (int ix = 0; ix < length; ix++) {
      int digit;
      char ch = yycharat(2 + ix);
      if (ch >= '0' && ch <= '9')
        digit = ch - '0';
      else if (ch >= 'a' && ch <= 'f')
        digit = (ch - 'a') + 10;
      else if (ch >= 'A' && ch <= 'F')
        digit = (ch - 'A') + 10;
      else
        throw new InvalidTopicMapException("Invalid escape sequence: '" +
                                           yytext() + "'");
    
      number = number * 16 + digit;
    }
    return (char) number;
  }  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CTMLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CTMLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken2() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: 
          { string.append(unhex(4));
          }
        case 49: break;
        case 2: 
          { /* ignore */
          }
        case 50: break;
        case 4: 
          { return newToken(CTMParser.RIGHTPAREN);
          }
        case 51: break;
        case 7: 
          { return newToken(CTMParser.STOP);
          }
        case 52: break;
        case 33: 
          { return newToken(CTMParser.ONEOH);
          }
        case 53: break;
        case 26: 
          { string.append((char) 10);
          }
        case 54: break;
        case 3: 
          { return newToken(CTMParser.LEFTPAREN);
          }
        case 55: break;
        case 17: 
          { return newToken(CTMParser.LEFTBRACKET);
          }
        case 56: break;
        case 15: 
          { return newToken(CTMParser.EQUALS);
          }
        case 57: break;
        case 36: 
          { return newToken(CTMParser.ISA);
          }
        case 58: break;
        case 42: 
          { return newToken(CTMParser.INCLUDE);
          }
        case 59: break;
        case 35: 
          { return newToken(CTMParser.DEF);
          }
        case 60: break;
        case 10: 
          { return newToken(CTMParser.SEMICOLON);
          }
        case 61: break;
        case 21: 
          { yybegin(YYINITIAL);
       return newToken(CTMParser.SINGLE_QUOTED_STRING, string.toString());
          }
        case 62: break;
        case 23: 
          { return newToken(CTMParser.HATHAT);
          }
        case 63: break;
        case 39: 
          { return newToken(CTMParser.TRIPLE_QUOTED_STRING,
                                     yytext().substring(3, yylength() - 3));
          }
        case 64: break;
        case 12: 
          { string.setLength(0); // empty string buffer
                     yybegin(STRING);
          }
        case 65: break;
        case 25: 
          { string.append('"');
          }
        case 66: break;
        case 28: 
          { string.append('\\');
          }
        case 67: break;
        case 6: 
          { return newToken(CTMParser.INTEGER);
          }
        case 68: break;
        case 13: 
          { return newToken(CTMParser.COMMA);
          }
        case 69: break;
        case 43: 
          { return newToken(CTMParser.VERSION);
          }
        case 70: break;
        case 37: 
          { return newToken(CTMParser.AKO);
          }
        case 71: break;
        case 16: 
          { return newToken(CTMParser.TILDE);
          }
        case 72: break;
        case 20: 
          { string.append(yycharat(0));
          }
        case 73: break;
        case 41: 
          { return newToken(CTMParser.PREFIX);
          }
        case 74: break;
        case 48: 
          { return newToken(CTMParser.DATETIME);
          }
        case 75: break;
        case 11: 
          { return newToken(CTMParser.RIGHTBRACKET);
          }
        case 76: break;
        case 9: 
          { return newToken(CTMParser.HYPHEN);
          }
        case 77: break;
        case 32: 
          { return newToken(CTMParser.WRAPPED_IRI,
                                     yytext().substring(1, yylength() - 1));
          }
        case 78: break;
        case 8: 
          { return newToken(CTMParser.IDENTIFIER);
          }
        case 79: break;
        case 31: 
          { return newToken(CTMParser.QNAME);
          }
        case 80: break;
        case 27: 
          { string.append((char) 13);
          }
        case 81: break;
        case 38: 
          { return newToken(CTMParser.IRI);
          }
        case 82: break;
        case 47: 
          { return newToken(CTMParser.DATE);
          }
        case 83: break;
        case 1: 
          { throw new InvalidTopicMapException("Illegal character <"+yytext()+"> at " +
                                     docuri + ":" + (yyline+1) + ":" + yycolumn);
          }
        case 84: break;
        case 18: 
          { return newToken(CTMParser.HAT);
          }
        case 85: break;
        case 24: 
          { return newToken(CTMParser.NAMED_WILDCARD,
                                     yytext().substring(1));
          }
        case 86: break;
        case 44: 
          { string.append(unhex(6));
          }
        case 87: break;
        case 34: 
          { return newToken(CTMParser.END);
          }
        case 88: break;
        case 14: 
          { return newToken(CTMParser.AT);
          }
        case 89: break;
        case 22: 
          { return newToken(CTMParser.VARIABLE);
          }
        case 90: break;
        case 29: 
          { string.append((char) 9);
          }
        case 91: break;
        case 19: 
          { return newToken(CTMParser.WILDCARD);
          }
        case 92: break;
        case 46: 
          { return newToken(CTMParser.MERGEMAP);
          }
        case 93: break;
        case 45: 
          { return newToken(CTMParser.ENCODING);
          }
        case 94: break;
        case 30: 
          { return newToken(CTMParser.DECIMAL);
          }
        case 95: break;
        case 5: 
          { return newToken(CTMParser.COLON);
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return newToken(CTMParser.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
