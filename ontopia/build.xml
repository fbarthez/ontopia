<?xml version="1.0" encoding="ISO-8859-1" ?>
<!--DOCTYPE project SYSTEM "ant-project.dtd"-->
<!-- 
  $Id: build.xml,v 1.769 2009/05/25 05:48:16 geir.gronmo Exp $ 

  Note to new users: call 'ant bootstrap' to initialize your build
                     system after you've checked out the source 
                     code for the first time.

  Actions:
    clean
    compile
    jar
    javadoc

  Modules:
    engine
    query
    fulltext
    schema
    navigator
    webed
    rdbms

-->

<project name="ontopia" default="bootstrap" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="init">
    <!-- Create time stamp -->
    <tstamp>
      <format property="build.date" pattern="yyyy-MM-dd 'at' HH:mm:ss z" />
    </tstamp>

    <!-- Get user specific properties -->
    <property file="build.properties" />

    <!-- Set project properties -->
    <property name="project.root" value="${basedir}" />
    <property name="src.path" value="${project.root}/src" />
    <property name="java.path" value="${src.path}/java" />
    <property name="doc.path" value="${project.root}/doc" />
    <property name="topicmaps.path" value="${project.root}/topicmaps" />
    <property name="3rdparty.path" value="${project.root}/3rdparty" />

    <!-- Compiler properties -->
    <property name="build.compiler" value="modern" />
    <property name="optimize" value="false" />
    <property name="deprecation" value="off" />
    <property name="debug" value="true" />
    <property name="debuglevel" value="source,lines,vars" />

    <!-- Build directories -->
    <property name="build.root" value="${project.root}/build" />
    <property name="build.dists" value="${build.root}/dists" />
    <property name="build.classes" value="${build.root}/classes" />
    <property name="build.jars" value="${build.root}/jars" />
    <property name="build.javadoc" value="${build.root}/javadoc" />
    <property name="build.doc" value="${build.root}/doc" />
    <property name="build.tmp" value="${build.root}/tmp" />

    <!-- Specific build properties -->
    <property name="ant.home" value="NOTE:please-specify-this-property-in-file-build.properties" />
    <property name="j2se14.home" value="NOTE:please-specify-this-property-in-file-build.properties" />
    <property name="j2se15.home" value="NOTE:please-specify-this-property-in-file-build.properties" />
    <property name="j2se16.home" value="NOTE:please-specify-this-property-in-file-build.properties" />

    <ivy:retrieve />
  </target>

  <!-- ======================================================================
         CLASSPATH
        ====================================================================== -->

  <target name="clean.ivy">
    <ivy:cleancache />
  </target>

  <ivy:cachepath pathid="project.class.path.ivy"/>

  <path id="project.class.path.nolog4j">
    <pathelement location="${basedir}/3rdparty/ontoboot.jar" />
    <pathelement location="${basedir}/3rdparty/jing.jar" />
    <pathelement location="${basedir}/3rdparty/tmapi.jar" />
    <pathelement location="${basedir}/3rdparty/touchgraph.jar" />
    <path refid="project.class.path.ivy"/>
  </path>

  <path id="project.class.path">
  
    <path refid="project.class.path.nolog4j"/>
    <!--pathelement location="${3rdparty.path}/log4j.jar" /-->
    <pathelement location="${build.classes}" />
  
  </path>

  <!--path id="_project.class.path.nolog4j">

    <pathelement location="${java.home}/jre/lib/rt.jar" />
    <pathelement location="${java.home}/jre/lib/tools.jar" />

    <pathelement location="${3rdparty.path}/j2ee131.jar" />

    <pathelement location="${3rdparty.path}/ontoboot.jar" />
    <pathelement location="${3rdparty.path}/crimson.jar" />
    <pathelement location="${3rdparty.path}/brownell.jar" />
    <pathelement location="${3rdparty.path}/jaxp.jar" />
    <pathelement location="${3rdparty.path}/antlr.jar" />
    <pathelement location="${3rdparty.path}/junit.jar" />
    <pathelement location="${3rdparty.path}/getopt.jar" />
    <pathelement location="${3rdparty.path}/lucene.jar" />
    <pathelement location="${3rdparty.path}/snowball.jar" />
    <pathelement location="${3rdparty.path}/saxon.jar" />
    <pathelement location="${3rdparty.path}/trove.jar" />
    <pathelement location="${3rdparty.path}/backport-util-concurrent.jar" />
    <pathelement location="${3rdparty.path}/jena.jar" />
    <pathelement location="${3rdparty.path}/jakarta-oro.jar" />
    <pathelement location="${3rdparty.path}/jing.jar" />
    <pathelement location="${3rdparty.path}/icu4j.jar" />
    <pathelement location="${3rdparty.path}/jdbm.jar" />
    <pathelement location="${3rdparty.path}/xerces.jar" />
    <pathelement location="${3rdparty.path}/concurrent.jar" />
    <pathelement location="${3rdparty.path}/tmapi.jar" />
    <pathelement location="${3rdparty.path}/jgroups-all.jar" />
    <pathelement location="${3rdparty.path}/JFlex.jar" />

    <pathelement location="${3rdparty.path}/commons-collections.jar" />
    <pathelement location="${3rdparty.path}/commons-fileupload.jar" />
    <pathelement location="${3rdparty.path}/commons-dbcp.jar" />
    <pathelement location="${3rdparty.path}/commons-pool.jar" />
    <pathelement location="${3rdparty.path}/commons-logging.jar" />

    <pathelement location="${3rdparty.path}/catalina.jar" />

    <pathelement location="${3rdparty.path}/velocity.jar" />
    <pathelement location="${3rdparty.path}/logkit.jar" />

    <pathelement location="${3rdparty.path}/httpunit.jar" />
    <pathelement location="${3rdparty.path}/touchgraph.jar" />
    <pathelement location="${3rdparty.path}/Tidy.jar" />
    <pathelement location="${3rdparty.path}/acmeenc.jar" />
    <pathelement location="${3rdparty.path}/opencsv.jar" />

    <pathelement location="${3rdparty.path}/tagsoup.jar" />
    <pathelement location="${3rdparty.path}/poi.jar" />
    <pathelement location="${3rdparty.path}/poi-scratchpad.jar" />
    <pathelement location="${3rdparty.path}/pdfbox.jar" />
    <pathelement location="${3rdparty.path}/fontbox.jar" />
    <pathelement location="${3rdparty.path}/bcprov.jar" />
    <pathelement location="${3rdparty.path}/bcmail.jar" />

    <pathelement location="${3rdparty.path}/jstl.jar" />
    <pathelement location="${3rdparty.path}/servlet.jar" />
    <pathelement location="${3rdparty.path}/standard.jar" />

    <pathelement location="/usr/local/jython/jython.jar" />

    <pathelement location="${build.classes}" />

  </path-->
  
  <path id="jasper.class.path">
    <pathelement location="${dist.path}/apache-tomcat/bin/commons-logging-api.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/jasper-runtime.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/jasper-compiler.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/jasper-compiler-jdt.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/jsp-api.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/servlet-api.jar" />
    <pathelement location="${ant.home}/lib/ant.jar" />
    <pathelement location="${ant.home}/lib/ant-launcher.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/commons-el.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/jstl.jar" />
    <pathelement location="${dist.path}/apache-tomcat/common/lib/standard.jar" />
    <pathelement location="${build.jars}/oks-resources.jar" />
    <path refid="project.class.path" />
  </path>

  <!-- ======================================================================
        Bootstrap
       ====================================================================== -->

  <!--taskdef name="runtest" classname="net.ontopia.ant.TestTask"/ -->

  <!--taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin" /-->

  <taskdef name="texen" classname="net.ontopia.ant.TemplateTexenTask">
    <!-- WARNING: velocity will define its template directory just
    once, so when calling the texen task multiple times only the first
    template directory is used. for that reason we're using build.tmp
    as the template directory. --> 
    <classpath refid="project.class.path"/>
  </taskdef>

  <target name="jar.ontoboot" depends="init">
    <echo>Creating engine runtime jar file...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="net/ontopia/test/TestRunner.java" />
        <include name="net/ontopia/ant/TestTask.java" />
        <include name="net/ontopia/ant/TemplateTexenTask.java" />
      </patternset>
    </javac>
    <delete file="${3rdparty.path}/ontoboot.jar" />
    <jar basedir="${build.classes}" jarfile="${3rdparty.path}/ontoboot.jar">
      <patternset>
        <include name="net/ontopia/test/TestRunner.java" />
        <include name="net/ontopia/ant/TestTask.class" />
        <include name="net/ontopia/ant/TemplateTexenTask.class" />
      </patternset>
    </jar>
  </target>

  <!-- ======================================================================
        Build cleanup
       ====================================================================== -->

  <target name="clean.build" depends="init">
    <delete dir="${build.root}" />
    <mkdir dir="${build.root}" />
    <mkdir dir="${build.dists}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${build.jars}" />
    <mkdir dir="${build.doc}" />
  </target>

  <target name="bootstrap" depends="dist.oks.init">
    <!-- This target prepares build system. The target should be called when 
         checking out the source code to a new system -->

    <!-- Create directories -->
    <mkdir dir="${build.root}" />
    <mkdir dir="${build.dists}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${build.jars}" />
    <mkdir dir="${build.doc}" />
    <!-- Prepare product classes -->
    <antcall target="prepare.product.class"/>
  </target>

  <!-- ======================================================================
        Generic stuff
       ====================================================================== -->

  <target name="clean.classes" depends="init">
    <echo>Cleaning all compiled classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <include name="**/*.class" />
      </fileset>
    </delete>
  </target>

  <!-- General class compilation rules -->
  <target name="compile.pwd" depends="init">
    <javac srcdir="${user.dir}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="*.java" />
      </patternset>
    </javac>
  </target>

  <target name="compile.rpwd" depends="init">
    <javac srcdir="${user.dir}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="**/*.java" />
      </patternset>
    </javac>
  </target>

  <!-- General class clean up rules -->

  <target name="clean.rpwd" depends="init">
    <delete>
      <fileset dir="${user.dir}" includes="**/*.class" />
    </delete>
  </target>

  <target name="clean.pwd" depends="init">
    <delete>
      <fileset dir="${user.dir}" includes="*.class" />
    </delete>
  </target>

  <!-- ======================================================================
        Engine classes
       ====================================================================== -->

  <!-- Patterns -->
  <patternset id="sources.engine">
    <include name="net/ontopia/Ontopia.java" />
    <include name="net/ontopia/net/*.java" />
    <include name="net/ontopia/net/data/*.java" />
    <include name="net/ontopia/utils/*.java" />
    <include name="net/ontopia/xml/*.java" />
    <include name="net/ontopia/infoset/core/*.java" />
    <include name="net/ontopia/infoset/utils/*.java" />
    <include name="net/ontopia/infoset/impl/basic/*.java" />
    <include name="net/ontopia/topicmaps/core/*.java" />
    <include name="net/ontopia/topicmaps/core/index/*.java" />
    <include name="net/ontopia/topicmaps/core/events/*.java" />
    <include name="net/ontopia/topicmaps/entry/*.java" />
    <include name="net/ontopia/topicmaps/helpers/*.java" />
    <include name="net/ontopia/topicmaps/utils/*.java" />
    <include name="net/ontopia/topicmaps/utils/ltm/*.java" />
    <include name="net/ontopia/topicmaps/utils/ctm/*.java" />
    <include name="net/ontopia/topicmaps/utils/rdf/*.java" />
    <include name="net/ontopia/topicmaps/utils/xfml/*.java" />
    <include name="net/ontopia/topicmaps/utils/tmrap/*.java"/>
    <exclude name="net/ontopia/topicmaps/utils/tmrap/XFireAdapter.java"/>
    <include name="net/ontopia/topicmaps/impl/utils/*.java" />
    <include name="net/ontopia/topicmaps/impl/basic/*.java" />
    <include name="net/ontopia/topicmaps/impl/remote/*.java" />
    <include name="net/ontopia/topicmaps/impl/basic/index/*.java" />
    <include name="net/ontopia/topicmaps/xml/*.java" />
  </patternset>

  <patternset id="classes.engine">
    <include name="net/ontopia/Ontopia.class" />
    <include name="net/ontopia/net/*.class" />
    <include name="net/ontopia/net/data/*.class" />
    <include name="net/ontopia/utils/*.class" />
    <include name="net/ontopia/xml/*.class" />
    <include name="net/ontopia/infoset/core/*.class" />
    <include name="net/ontopia/infoset/utils/*.class" />
    <include name="net/ontopia/infoset/impl/basic/*.class" />
    <include name="net/ontopia/topicmaps/core/*.class" />
    <include name="net/ontopia/topicmaps/core/index/*.class" /> 
    <include name="net/ontopia/topicmaps/core/events/*.class" />
    <include name="net/ontopia/topicmaps/entry/*.class" />
    <include name="net/ontopia/topicmaps/helpers/*.class" />
    <include name="net/ontopia/topicmaps/utils/*.class" />
    <include name="net/ontopia/topicmaps/utils/ltm/*.class" />
    <include name="net/ontopia/topicmaps/utils/ctm/*.class" />
    <include name="net/ontopia/topicmaps/utils/rdf/*.class" />
    <include name="net/ontopia/topicmaps/utils/xfml/*.class" />
    <include name="net/ontopia/topicmaps/utils/tmrap/*.class"/>
    <exclude name="net/ontopia/topicmaps/utils/tmrap/XFireAdapter.class"/>
    <include name="net/ontopia/topicmaps/impl/utils/*.class" />
    <include name="net/ontopia/topicmaps/impl/basic/*.class" />
    <include name="net/ontopia/topicmaps/impl/basic/index/*.class" />
    <include name="net/ontopia/topicmaps/xml/*.class" />
    <include name="net/ontopia/topicmaps/xml/tmxml.rnc" />
    <include name="net/ontopia/topicmaps/impl/remote/*.class" />
  </patternset>

  <patternset id="sources.test.engine">
    <include name="net/ontopia/test/*.java"/>
    <include name="net/ontopia/net/data/test/*.java"/>
    <include name="net/ontopia/test/threads/*.java"/>
    <include name="net/ontopia/test/threads/action/*.java"/>
    <include name="net/ontopia/test/threads/target/*.java"/>
    <include name="net/ontopia/utils/test/*.java"/>
    <include name="net/ontopia/xml/test/*.java"/>
    <include name="net/ontopia/infoset/impl/basic/test/*.java"/>
    <include name="net/ontopia/topicmaps/test/AbstractTopicMapTestCase.java"/>
    <include name="net/ontopia/topicmaps/core/test/*.java"/>
    <include name="net/ontopia/topicmaps/core/index/test/*.java"/>
    <include name="net/ontopia/topicmaps/core/events/test/*.java"/>
    <include name="net/ontopia/topicmaps/entry/test/*.java"/>
    <include name="net/ontopia/topicmaps/xml/test/*.java"/>
    <include name="net/ontopia/topicmaps/impl/basic/test/*.java"/>
    <include name="net/ontopia/topicmaps/impl/basic/index/test/*.java"/>
    <include name="net/ontopia/topicmaps/impl/utils/test/*.java"/>
    <include name="net/ontopia/topicmaps/utils/test/*.java"/>
    <include name="net/ontopia/topicmaps/utils/rdf/test/*.java"/>
    <include name="net/ontopia/topicmaps/utils/ltm/test/*.java"/>
    <include name="net/ontopia/topicmaps/utils/ctm/test/*.java"/>
    <include name="net/ontopia/topicmaps/utils/tmrap/test/**/*.java"/>
    <include name="net/ontopia/topicmaps/cmdlineutils/test/*.java"/>
    <include name="net/ontopia/test/perf/*.java"/>
    <include name="net/ontopia/net/data/test/*.java" />
  </patternset>

  <patternset id="classes.test.engine">
    <include name="net/ontopia/test/*.class"/>
    <include name="net/ontopia/net/data/test/*.class"/>
    <include name="net/ontopia/test/threads/*.class"/>
    <include name="net/ontopia/test/threads/action/*.class"/>
    <include name="net/ontopia/test/threads/target/*.class"/>
    <include name="net/ontopia/utils/test/*.class"/>
    <include name="net/ontopia/xml/test/*.class"/>
    <include name="net/ontopia/infoset/impl/basic/test/*.class"/>
    <include name="net/ontopia/topicmaps/test/AbstractTopicMapTestCase.class"/>
    <include name="net/ontopia/topicmaps/core/test/*.class"/>
    <include name="net/ontopia/topicmaps/core/index/test/*.class"/>
    <include name="net/ontopia/topicmaps/core/events/test/*.class"/>
    <include name="net/ontopia/topicmaps/entry/test/*.class"/>
    <include name="net/ontopia/topicmaps/xml/test/*.class"/>
    <include name="net/ontopia/topicmaps/impl/basic/test/*.class"/>
    <include name="net/ontopia/topicmaps/impl/basic/index/test/*.class"/>
    <include name="net/ontopia/topicmaps/impl/utils/test/*.class"/>
    <include name="net/ontopia/topicmaps/utils/test/*.class"/>
    <include name="net/ontopia/topicmaps/utils/ltm/test/*.class"/>
    <include name="net/ontopia/topicmaps/utils/ctm/test/*.class"/>
    <include name="net/ontopia/topicmaps/utils/rdf/test/*.class"/>
    <include name="net/ontopia/topicmaps/utils/tmrap/test/**/*.class"/>
    <include name="net/ontopia/topicmaps/cmdlineutils/test/*.class"/>
    <include name="net/ontopia/test/perf/*.class"/>
    <include name="net/ontopia/net/data/test/*.class" />
  </patternset>

  <target name="compile.engine" depends="compile.ltm,compile.ctm">
    <echo>Compiling engine classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.engine" />
    </javac>
    <!-- copy configuration files -->
    <copy file="${java.path}/net/ontopia/topicmaps/xml/tmxml.rnc" 
        tofile="${build.classes}/net/ontopia/topicmaps/xml/tmxml.rnc" overwrite="yes" />
    <antcall target="compile.tmapi" />
  </target>

  <target name="clean.engine" depends="init">
    <echo>Cleaning up engine classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.engine" />
      </fileset>
    </delete>
    <antcall target="clean.tmapi" />
  </target>

  <target name="jar.net" depends="compile.engine">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-net.jar">
      <patternset>
        <include name="net/ontopia/net/**/*.class" />
      </patternset>
    </jar>
  </target>

  <!-- =====================================================================
        Cmdlineutils
       ====================================================================== -->

  <patternset id="sources.cmdlineutils">
    <include name="net/ontopia/topicmaps/cmdlineutils/**/*.java" />
    <exclude name="net/ontopia/topicmaps/cmdlineutils/deletion/*.java" />
  </patternset>

  <patternset id="classes.cmdlineutils">
    <include name="net/ontopia/topicmaps/cmdlineutils/**/*.class" />
  </patternset>

  <target name="compile.cmdlineutils" depends="compile.engine">
    <echo>Compiling command line utilities...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.cmdlineutils" />
    </javac>
  </target>

  <target name="clean.cmdlineutils" depends="init">
    <echo>Cleaning up command line utilities...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.cmdlineutils" />
      </fileset>
    </delete>
  </target>

  <!-- ======================================================================
        RDBMS (proxy)
       ====================================================================== -->

  <patternset id="sources.rdbms">
    <include name="net/ontopia/persistence/proxy/*.java" />
    <include name="net/ontopia/persistence/query/sql/*.java" />
    <include name="net/ontopia/persistence/query/jdo/*.java" />
    <include name="net/ontopia/persistence/rdbms/*.java" />
    <include name="net/ontopia/persistence/jdbcspy/*.java" />
    <include name="net/ontopia/products/RDBMSBackend.java" />
    <include name="net/ontopia/topicmaps/impl/rdbms/*.java" />
    <include name="net/ontopia/topicmaps/impl/rdbms/index/*.java" />
    <include name="net/ontopia/topicmaps/cmdlineutils/rdbms/*.java" />
  </patternset>

  <patternset id="classes.rdbms">
    <include name="net/ontopia/persistence/proxy/*.class" />
    <include name="net/ontopia/persistence/query/sql/*.class" />
    <include name="net/ontopia/persistence/query/jdo/*.class" />
    <include name="net/ontopia/persistence/rdbms/*.class" />
    <include name="net/ontopia/persistence/jdbcspy/*.class" />
    <include name="net/ontopia/products/RDBMSBackend.class" />
    <include name="net/ontopia/topicmaps/impl/rdbms/*.class" />
    <include name="net/ontopia/topicmaps/impl/rdbms/index/*.class" />
    <include name="net/ontopia/topicmaps/cmdlineutils/rdbms/*.class" />
    <!-- configuration files -->
    <include name="net/ontopia/topicmaps/impl/rdbms/config/mapping.xml" />
    <include name="net/ontopia/topicmaps/impl/rdbms/config/queries.xml" />
    <include name="net/ontopia/topicmaps/impl/rdbms/config/schema.xml" />
  </patternset>

  <target name="compile.rdbms" depends="compile.engine">
    <echo>Compiling rdbms implementation classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3"> 
      <patternset refid="sources.rdbms" />
    </javac>
    <!-- copy configuration files -->
    <copy file="${java.path}/net/ontopia/topicmaps/impl/rdbms/config/mapping.xml" 
        tofile="${build.classes}/net/ontopia/topicmaps/impl/rdbms/config/mapping.xml" overwrite="yes" />
    <copy file="${java.path}/net/ontopia/topicmaps/impl/rdbms/config/queries.xml" 
        tofile="${build.classes}/net/ontopia/topicmaps/impl/rdbms/config/queries.xml" overwrite="yes" />
  </target>

  <property name="dist.rdbms.packagenames" value="
       net.ontopia.topicmaps.impl.rdbms" />

  <property name="dist.rdbms.packagenames.other" value="
       net.ontopia.topicmaps.core.TopicMapStoreIF,
       net.ontopia.topicmaps.entry.TopicMapSourceIF" />

  <property name="dev.rdbms.packagenames" value="
       net.ontopia.topicmaps.core, 
       net.ontopia.topicmaps.core.index, 
       net.ontopia.topicmaps.core.events, 
       net.ontopia.topicmaps.impl.utils, 
       net.ontopia.infoset.core, 
       net.ontopia.persistence.proxy, 
       net.ontopia.persistence.rdbms, 
       net.ontopia.persistence.query.jdo, 
       net.ontopia.persistence.query.sql, 
       net.ontopia.topicmaps.impl.rdbms, 
       net.ontopia.topicmaps.impl.rdbms.index" />

  <target name="javadoc.rdbms" depends="init">
    <delete dir="${build.javadoc}/rdbms" />
    <mkdir dir="${build.javadoc}/rdbms" />
    <javadoc packagenames="${dev.rdbms.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/rdbms" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia RDBMS Backend Connector API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/rdbms" />
  </target>

  <!-- ======================================================================
        RDBMS tests (proxy)
       ====================================================================== -->

  <patternset id="sources.test.rdbms">
    <include name="net/ontopia/persistence/proxy/test/*.java" />
    <include name="net/ontopia/topicmaps/impl/rdbms/test/*.java" />
  </patternset>

  <patternset id="classes.test.rdbms">
    <include name="net/ontopia/persistence/proxy/test/*.class" />
    <include name="net/ontopia/topicmaps/impl/rdbms/test/*.class" />
  </patternset>

  <target name="compile.test.rdbms" depends="compile.test.engine,compile.rdbms">
    <echo>Compiling test cases for rdbms proxy...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="false" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.rdbms" />
    </javac>
  </target>

  <target name="clean.test.rdbms" depends="clean.test.engine">
    <echo>Cleaning up test cases for rdbms proxy...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.rdbms" />
      </fileset>
    </delete>
  </target>

  <!-- ======================================================================
        Virtual merge
       ====================================================================== -->

  <target name="compile.virtual" depends="compile.engine">
    <echo>Compiling virtual merge classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="net/ontopia/topicmaps/impl/virtual/**/*.java" />
      </patternset>
    </javac>
  </target>

  <target name="clean.virtual" depends="init">
    <echo>Cleaning up virtual merge classes...</echo>
    <delete>
      <fileset dir="${build.classes}/net/ontopia/topicmaps/impl/virtual">
        <patternset>
          <include name="**/*.class" />
        </patternset>
      </fileset>
    </delete>
  </target>

  <target name="jar.virtual" depends="compile.virtual">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-vmerge.jar">
      <patternset>
        <include name="net/ontopia/topicmaps/impl/virtual/**/*.class" />
      </patternset>
    </jar>
  </target>

  <!-- ======================================================================
        Fulltext search engine integration
       ====================================================================== -->

  <patternset id="sources.fulltext">
    <include name="net/ontopia/products/FulltextIntegration.java" />
    <include name="net/ontopia/infoset/fulltext/core/*.java" />
    <include name="net/ontopia/infoset/fulltext/impl/lucene/*.java" />
    <include name="net/ontopia/infoset/fulltext/impl/rdbms/*.java" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/*.java" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/taglibs/*.java" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/nav/plugins/*.java" />
    <include name="net/ontopia/infoset/fulltext/utils/*.java" />
  </patternset>

  <patternset id="classes.fulltext">
    <include name="net/ontopia/products/FulltextIntegration.class" />
    <include name="net/ontopia/infoset/fulltext/core/*.class" />
    <include name="net/ontopia/infoset/fulltext/impl/lucene/*.class" />
    <include name="net/ontopia/infoset/fulltext/impl/rdbms/*.class" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/*.class" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/taglibs/*.class" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/nav/plugins/*.class" />
    <include name="net/ontopia/infoset/fulltext/utils/*.class" />
  </patternset>

  <patternset id="sources.test.fulltext">
    <include name="net/ontopia/infoset/fulltext/impl/lucene/test/*.java" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/test/*.java" />
  </patternset>

  <patternset id="classes.test.fulltext">
    <include name="net/ontopia/infoset/fulltext/impl/lucene/test/*.class" />
    <include name="net/ontopia/infoset/fulltext/topicmaps/test/*.class" />
  </patternset>

  <target name="compile.fulltext" depends="compile.engine">
    <echo>Compiling fulltext classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.fulltext" />
    </javac>
  </target>

  <target name="compile.test.fulltext" depends="compile.test.engine,compile.fulltext">
    <echo>Compiling fulltext test suite...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.fulltext" />
    </javac>
  </target>

  <target name="clean.fulltext" depends="init">
    <echo>Cleaning up fulltext classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.fulltext" />
      </fileset>
    </delete>
  </target>

  <property name="dist.fulltext.packagenames" value="
       net.ontopia.infoset.fulltext.core, 
       net.ontopia.infoset.fulltext.topicmaps, 
       net.ontopia.infoset.fulltext.impl.lucene,
       net.ontopia.infoset.fulltext.impl.rdbms" />

  <property name="dist.fulltext.packagenames.other" value="
       net.ontopia.infoset.core, 
       net.ontopia.infoset.impl.basic" />

  <property name="dev.fulltext.packagenames" value="
       net.ontopia.infoset.fulltext.utils, 
             ${dist.fulltext.packagenames},
             ${dist.fulltext.packagenames.other}" />

  <target name="javadoc.fulltext" depends="init">
    <delete dir="${build.javadoc}/fulltext" />
    <mkdir dir="${build.javadoc}/fulltext" />
    <javadoc packagenames="${dev.fulltext.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/fulltext" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Full-text Integration API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/fulltext" />
  </target>

  <!-- ======================================================================
        DB2TM
       ====================================================================== -->

  <patternset id="sources.db2tm">
    <include name="net/ontopia/topicmaps/db2tm/*.java" />
  </patternset>

  <patternset id="classes.db2tm">
    <include name="net/ontopia/topicmaps/db2tm/*.class" />
    <include name="net/ontopia/topicmaps/db2tm/db2tm.rnc" />
  </patternset>

  <patternset id="sources.test.db2tm">
    <include name="net/ontopia/topicmaps/db2tm/test/**/*.java" />
  </patternset>

  <patternset id="classes.test.db2tm">
    <include name="net/ontopia/topicmaps/db2tm/test/**/*.class" />
  </patternset>

  <target name="compile.db2tm" depends="compile.engine">
    <echo>Compiling DB2TM classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.db2tm" />
    </javac>
    <!-- copy configuration files -->
    <copy file="${java.path}/net/ontopia/topicmaps/db2tm/db2tm.rnc" 
        tofile="${build.classes}/net/ontopia/topicmaps/db2tm/db2tm.rnc" overwrite="yes" />
  </target>

  <target name="clean.db2tm" depends="init">
    <echo>Cleaning up DB2tm implementation classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.db2tm" />
        <patternset refid="classes.test.db2tm" />
      </fileset>
    </delete>
  </target>

  <target name="compile.test.db2tm" depends="compile.test.engine,compile.db2tm">
    <echo>Compiling DB2TM test classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.db2tm" />
    </javac>
    <!-- copy mapping files -->
    <copy todir="${build.classes}/net/ontopia/topicmaps/db2tm/test" overwrite="yes">
      <fileset dir="${java.path}/net/ontopia/topicmaps/db2tm/test">
         <include name="*.xml" />
      </fileset>
     </copy>
  </target>

  <target name="jar.db2tm" depends="clean.db2tm,compile.db2tm">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-db2tm.jar">
      <patternset refid="classes.db2tm"/>
    </jar>
  </target>

  <property name="dist.db2tm.packagenames" value="
       net.ontopia.topicmaps.db2tm" />

  <property name="dev.db2tm.packagenames" value="
       net.ontopia.topicmaps.db2tm" />

  <!-- ======================================================================
        Classify (chew)
       ====================================================================== -->

  <patternset id="sources.classify">
    <include name="net/ontopia/topicmaps/classify/*.java" />
  </patternset>

  <patternset id="classes.classify">
    <include name="net/ontopia/topicmaps/classify/*.class" />
    <include name="net/ontopia/topicmaps/classify/lang/*" />
  </patternset>

  <patternset id="sources.test.classify">
    <include name="net/ontopia/topicmaps/classify/test/**/*.java" />
  </patternset>

  <patternset id="classes.test.classify">
    <include name="net/ontopia/topicmaps/classify/test/**/*.class" />
  </patternset>

  <target name="compile.classify" depends="compile.engine">
    <echo>Compiling CLASSIFY classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.classify" />
    </javac>
    <!-- copy configuration files -->
    <copy todir="${build.classes}/net/ontopia/topicmaps/classify/lang" overwrite="yes">
      <fileset dir="${java.path}/net/ontopia/topicmaps/classify/lang">
         <include name="*" />
      </fileset>
     </copy>
  </target>

  <target name="clean.classify" depends="init">
    <echo>Cleaning up Classify implementation classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.classify" />
      </fileset>
    </delete>
  </target>

  <target name="javadoc.classify" depends="init">
    <delete dir="${build.javadoc}/classify" />
    <mkdir dir="${build.javadoc}/classify" />
    <javadoc packagenames="net.ontopia.topicmaps.classify" sourcepath="${java.path}" destdir="${build.javadoc}/classify" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Topic Map Engine API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/classify" />
  </target>  

  <target name="compile.test.classify" depends="compile.test.engine,compile.classify">
    <echo>Compiling CLASSIFY test classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.classify" />
    </javac>
  </target>

  <target name="jar.classify" depends="clean.classify,compile.classify">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-classify.jar">
      <patternset refid="classes.classify"/>
    </jar>
  </target>

  <property name="dist.classify.packagenames" value="
       net.ontopia.topicmaps.classify" />

  <property name="dev.classify.packagenames" value="
       net.ontopia.topicmaps.classify" />

  <!-- ======================================================================
        TMRAP
       ====================================================================== -->

  <patternset id="sources.tmrap">
    <include name="net/ontopia/topicmaps/utils/tmrap/*.java"/>
    <exclude name="net/ontopia/topicmaps/utils/tmrap/XFireAdapter.java"/>
  </patternset>

  <patternset id="classes.tmrap">
    <include name="net/ontopia/topicmaps/utils/tmrap/*.class"/>
    <exclude name="net/ontopia/topicmaps/utils/tmrap/XFireAdapter.class"/>
  </patternset>

  <patternset id="sources.test.tmrap">
    <include name="net/ontopia/topicmaps/utils/tmrap/test/**/*.java"/>
  </patternset>

  <patternset id="classes.test.tmrap">
    <include name="net/ontopia/topicmaps/utils/tmrap/test/**/*.class"/>
  </patternset>

  <target name="compile.test.tmrap" depends="compile.test.engine">
    <echo>Compiling TMRAP test classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.tmrap" />
    </javac>
  </target>

  <target name="jar.tmrap" depends="compile.engine">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-tmrap.jar">
      <patternset refid="classes.tmrap"/>
    </jar>
  </target>

  <!-- ======================================================================
        Experimental topic map editor framework
       ====================================================================== -->

  <target name="compile.editor" depends="compile.engine">
    <echo>Compiling editor classes...</echo>
    <javac srcdir="${java.path}/net/ontopia/editor" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="**/*.java" />
      </patternset>
    </javac>
  </target>

  <target name="clean.editor" depends="init">
    <echo>Cleaning up editor classes...</echo>
    <delete>
      <fileset dir="${build.classes}/net/ontopia/editor">
        <patternset>
          <include name="**/*.class" />
        </patternset>
      </fileset>
    </delete>
  </target>

  <target name="jar.editor" depends="compile.engine">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-editor.jar">
      <patternset>
        <include name="net/ontopia/reflect/**/*.class" />
        <include name="net/ontopia/editor/**/*.class" />
      </patternset>
    </jar>
  </target>

  <target name="dist.editor" depends="jar.editor">
    <property name="dist.path.editor" value="${build.root}/editor" />
    <copy file="${java.path}/net/ontopia/editor/config.xml" todir="${dist.path.editor}" />
    <copy file="${java.path}/net/ontopia/editor/editor.sh" todir="${dist.path.editor}" />
    <copy todir="${dist.path.editor}/icons">
      <fileset dir="${java.path}/net/ontopia/editor/icons" />
    </copy>
  </target>


  <target name="compile.schema.editor" depends="compile.engine">
    <echo>Compiling schema editor classes...</echo>
    <delete>
      <fileset dir="${build.classes}/net/ontopia/topicmaps/schema">
        <patternset>
          <include name="**/*.class" />
        </patternset>
      </fileset>
    </delete>
    <javac srcdir="${java.path}/net/ontopia/topicmaps/schema" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="**/*.java" />
      </patternset>
    </javac>
  </target>

  <!-- ======================================================================
        Virtual topic map demo (jdbcwrap)
       ====================================================================== -->

  <target name="compile.jdbcwrap" depends="compile.engine">
    <echo>Compiling jdbcwrap classes...</echo>
    <javac srcdir="${java.path}/net/ontopia/jdbcwrap" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="**/*.java" />
      </patternset>
    </javac>
  </target>

  <target name="clean.jdbcwrap" depends="init">
    <echo>Cleaning up jdbcwrap classes...</echo>
    <delete>
      <fileset dir="${build.classes}/net/ontopia/jdbcwrap">
        <patternset>
          <include name="**/*.class" />
        </patternset>
      </fileset>
    </delete>
  </target>

  <target name="jar.jdbcwrap" depends="compile.engine">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-jdbcwrap.jar">
      <patternset>
        <include name="net/ontopia/jdbcwrap/**/*.class" />
      </patternset>
    </jar>
  </target>


  <!-- ======================================================================
        Brain Navigator integration (Prototype)
       ====================================================================== -->

  <target name="compile.tmnav" depends="compile.engine">
    <echo>Compiling tmnav classes...</echo>
    <javac srcdir="${java.path}/net/ontopia/kal/nav" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="**/*.java" />
      </patternset>
      <classpath>
        <pathelement location="${3rdparty.path}/BrainSDK.jar" />
        <pathelement location="${build.classes}" />
      </classpath>
    </javac>
  </target>

  <target name="clean.tmnav" depends="init">
    <echo>Cleaning up tmnav classes...</echo>
    <delete>
      <fileset dir="${build.classes}/net/ontopia/kal/nav">
        <patternset>
          <include name="**/*.class" />
        </patternset>
      </fileset>
    </delete>
  </target>

  <target name="jar.tmnav" depends="compile.tmnav">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-tmnav.jar">
      <patternset>
        <include name="net/ontopia/kal/nav/**/*.class" />
      </patternset>
    </jar>
  </target>

  <!-- ======================================================================
        Unit tests
       ====================================================================== -->

  <target name="test" depends="init">
    <property name="test.config" value="${java.path}/test-data/config/${user.name}.xml" />
    <property name="test.name" value="default" />
    <echo>Using configuration file ${test.config}</echo>
    <!--runtest testfile="${test.config}"/-->
    <java classname="net.ontopia.test.TestRunner" fork="true" classpath="project.class.path">
      <jvmarg value="-Dnet.ontopia.xml.Log4jSaxErrorHandler.ignoreNamespaceErrors=true" />
      <jvmarg value="-Dnet.ontopia.test.root=${java.path}/test-data" />
      <arg value="--loglevel=ERROR" />
      <arg value="${test.config}" />
      <arg value="${test.name}" />
    </java>
  </target>

  <!-- ======================================================================
        Engine tests
       ====================================================================== -->

  <target name="compile.test.engine" depends="compile.engine">
    <echo>Compiling test cases for engine...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="false" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.engine" />
      <patternset refid="sources.test.tmapi" />
    </javac>
  </target>

  <target name="clean.test.engine" depends="clean.engine">
    <echo>Cleaning up test cases for engine...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.engine" />
        <patternset refid="classes.test.tmapi" />
      </fileset>
    </delete>
  </target>

  <!-- ======================================================================
        API documentation (docbook)
       ====================================================================== -->

  <target name="makehtml.uptodatetest" depends="init">
    <echo>Checking if ${file}.html is up-to-date (newer than ${file}).</echo>
    <uptodate property="htmlUpToDate" srcfile="${file}"
        targetfile="${file}.html"/>
  </target>
  
  <!-- NOTE: removed unless="htmlUpToDate" depends="makehtml.uptodatetest" 
             because the document may contain conditions -->

  <target name="makehtml" depends="init">
    <echo>Generating ${file}.html</echo>
    <property name="stylesheet.dir" value="${doc.path}/stylesheets/" />
    <property name="number-sects" value="true" />
    <property name="make-toc" value="true" />
    <!-- Note: param values must be empty in order to evaluate as false -->
    <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.path}/stylesheets" classpathref="project.class.path">
      <arg value="-o" />
      <arg value="${file}.html" />

      <arg value="${file}" />
      <arg value="docbook2html.xslt" />

      <arg value="number-sects=${number-sects}" />
      <arg value="make-toc=${make-toc}" />
      <arg value="condition=${dist.condition}" />
    </java>
  </target>

  <target name="makehtml-spec" depends="init">
    <echo>Generating specification ${file}.html</echo>
    <property name="stylesheet.dir" value="${doc.path}/stylesheets/" />
    <property name="number-sects" value="true" />
    <property name="make-toc" value="true" />
    <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.path}/stylesheets" classpathref="project.class.path">
      <arg value="-o" />
      <arg value="${file}.html" />

      <arg value="${file}" />
      <arg value="dbspec2html.xslt" />

      <arg value="number-sects=${number-sects}" />
      <arg value="make-toc=${make-toc}" />
    </java>
  </target>

  <target name="makehtml-walsh" depends="init">
    <echo>Generating ${file}.html</echo>
    <property name="stylesheet.dir" value="${doc.path}/stylesheets/" />
    <property name="number-sects" value="true" />
    <property name="make-toc" value="true" />
    <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.path}/stylesheets" classpathref="project.class.path">
      <arg value="-o" />
      <arg value="${file}.html" />

      <arg value="${file}" />
      <arg value="docbook/html/docbook.xsl" />

      <arg value="number-sects=${number-sects}" />
      <arg value="make-toc=${make-toc}" />
    </java>
  </target>

  <target name="makehtml-gcapaper" depends="init">
    <echo>Generating ${file}.html</echo>
    <property name="stylesheet.dir" value="${doc.path}/stylesheets/" />
    <property name="number-sects" value="true" />
    <property name="make-toc" value="true" />
    <java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.path}/stylesheets" classpathref="project.class.path">
      <arg value="-o" />
      <arg value="${file}.html" />

      <arg value="${file}" />
      <arg value="gcapaper2html.xslt" />

      <arg value="number-sects=${number-sects}" />
      <arg value="make-toc=${make-toc}" />
    </java>
  </target>

  <!-- ======================================================================
        Engine api documentation (javadoc)
       ====================================================================== -->

  <property name="dist.engine.packagenames" value="
       net.ontopia.products,
       net.ontopia.utils, 
       net.ontopia.infoset.core, 
       net.ontopia.infoset.impl.basic, 
       net.ontopia.topicmaps.core, 
       net.ontopia.topicmaps.core.index, 
       net.ontopia.topicmaps.core.events, 
       net.ontopia.topicmaps.entry, 
       net.ontopia.topicmaps.utils,
       net.ontopia.topicmaps.utils.ltm,
       net.ontopia.topicmaps.utils.rdf,
       net.ontopia.topicmaps.utils.ctm,
       net.ontopia.topicmaps.xml, 
       net.ontopia.topicmaps.db2tm,
       net.ontopia.topicmaps.impl.basic" />

  <property name="dev.engine.packagenames" value="
       net.ontopia.products,
       net.ontopia.utils, 
       net.ontopia.xml, 
       net.ontopia.infoset.core, 
       net.ontopia.infoset.utils, 
       net.ontopia.infoset.impl.basic, 
       net.ontopia.topicmaps.core, 
       net.ontopia.topicmaps.core.index, 
       net.ontopia.topicmaps.core.events, 
       net.ontopia.topicmaps.entry, 
       net.ontopia.topicmaps.utils,
       net.ontopia.topicmaps.utils.ltm,
       net.ontopia.topicmaps.utils.ctm,
       net.ontopia.topicmaps.utils.rdf,
       net.ontopia.topicmaps.xml, 
       net.ontopia.topicmaps.impl.basic, 
       net.ontopia.topicmaps.impl.basic.index, 
       net.ontopia.topicmaps.impl.utils, 
       net.ontopia.topicmaps.db2tm,
       net.ontopia.topicmaps.classify,
       net.ontopia.topicmaps.cmdlineutils" />

  <target name="javadoc.engine" depends="init">
    <delete dir="${build.javadoc}/engine" />
    <mkdir dir="${build.javadoc}/engine" />
    <javadoc packagenames="${dev.engine.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/engine" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Topic Map Engine API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
      <group title="Core Topic Map Packages" packages="net.ontopia.topicmaps.core:net.ontopia.topicmaps.core.index:net.ontopia.topicmaps.core.events:net.ontopia.topicmaps.entry:net.ontopia.topicmaps.utils:net.ontopia.topicmaps.xml" />
      <group title="Core Information Set Packages" packages="net.ontopia.infoset.core:net.ontopia.infoset.impl.basic" />
      <group title="Basic Implementation" packages="net.ontopia.topicmaps.impl.basic:net.ontopia.topicmaps.impl.basic.index" />
      <!--link href="http://java.sun.com/products/jdk/1.2/docs/api/"/-->
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/engine" />
  </target>

  <!-- ====================================================================
       Navigator 2nd generation: compile, jar, clean
       ==================================================================== -->

  <patternset id="sources.navigator">
    <include name="net/ontopia/products/GenericNavigator.java" />
    <include name="net/ontopia/utils/ontojsp/*.java" />
    <include name="net/ontopia/topicmaps/nav2/core/*.java" />
    <include name="net/ontopia/topicmaps/nav2/utils/*.java" />
    <include name="net/ontopia/topicmaps/nav2/impl/basic/*.java" />
    <include name="net/ontopia/topicmaps/nav2/impl/framework/*.java" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/logic/*.java" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/output/*.java" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/value/*.java" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/TMvalue/*.java" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/framework/*.java" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/tolog/*.java" />
    <include name="net/ontopia/topicmaps/nav2/plugins/*.java" />
    <include name="net/ontopia/topicmaps/nav2/servlets/*.java" />
    <include name="net/ontopia/topicmaps/nav2/appservers/**/*.java" />
    <include name="net/ontopia/topicmaps/nav2/webapps/**/*.java" />

    <exclude name="net/ontopia/topicmaps/nav2/webapps/ontopoly/**/*.java" />

    <!-- Using packages from old nav framework -->
    <include name="net/ontopia/topicmaps/nav/context/*.java" />
    <include name="net/ontopia/topicmaps/nav/taglibs/template/*.java" />
    <include name="net/ontopia/topicmaps/nav/utils/comparators/*.java" />
    <include name="net/ontopia/topicmaps/nav/utils/deciders/*.java" />
    <include name="net/ontopia/topicmaps/nav/utils/stringifiers/ComparatorNameStringifier.java" />
    <include name="net/ontopia/topicmaps/nav/utils/grabbers/ContextNameGrabber.java" />

    <!-- New portal toolkit packages -->
    <include name="net/ontopia/topicmaps/nav2/portlets/taglib/*.java" />
    <include name="net/ontopia/topicmaps/nav2/portlets/pojos/*.java" />
    
    <!-- Don't include test classes -->
    <exclude name="net/ontopia/topicmaps/nav2/**/test/*.java"/>
  </patternset>

  <patternset id="classes.navigator">
    <include name="net/ontopia/products/GenericNavigator.class" />
    <include name="net/ontopia/utils/ontojsp/*.class" />
    <include name="net/ontopia/topicmaps/nav2/core/*.class" />
    <include name="net/ontopia/topicmaps/nav2/utils/*.class" />
    <include name="net/ontopia/topicmaps/nav2/impl/basic/*.class" />
    <include name="net/ontopia/topicmaps/nav2/impl/framework/*.class" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/logic/*.class" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/output/*.class" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/value/*.class" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/TMvalue/*.class" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/framework/*.class" />
    <include name="net/ontopia/topicmaps/nav2/taglibs/tolog/*.class" />
    <include name="net/ontopia/topicmaps/nav2/plugins/*.class" />
    <include name="net/ontopia/topicmaps/nav2/servlets/*.class" />
    <include name="net/ontopia/topicmaps/nav2/appservers/**/*.class" />
    <include name="net/ontopia/topicmaps/nav2/webapps/**/*.class" />

    <exclude name="net/ontopia/topicmaps/nav2/webapps/ontopoly/**/*.class" />

    <!-- Using packages from old nav framework -->
    <include name="net/ontopia/topicmaps/nav/context/*.class" />
    <include name="net/ontopia/topicmaps/nav/taglibs/template/*.class" />
    <include name="net/ontopia/topicmaps/nav/utils/comparators/*.class" />
    <include name="net/ontopia/topicmaps/nav/utils/deciders/*.class" />
    <include name="net/ontopia/topicmaps/nav/utils/stringifiers/ComparatorNameStringifier.class" />
    <include name="net/ontopia/topicmaps/nav/utils/grabbers/ContextNameGrabber.class" />

    <!-- New portal toolkit packages -->
    <include name="net/ontopia/topicmaps/nav2/portlets/taglib/*.class" />
    <include name="net/ontopia/topicmaps/nav2/portlets/pojos/*.class" />
        
    <!-- tld -->
    <include name="META-INF/*.tld" />
  </patternset>

  <target name="compile.navigator" depends="compile.engine">
    <echo>Compiling navigator 2nd generation classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" 
           deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" 
           classpathref="project.class.path" source="1.3">
      <patternset refid="sources.navigator" />
    </javac>
    <echo>Copying TLDs to META-INF...</echo>
    <copy todir="${build.classes}/META-INF/" overwrite="yes">
      <fileset dir="${src.path}/webapps/webedtest/WEB-INF/jsp/">
         <include name="*.tld" />
      </fileset>
     </copy>
  </target>

  <target name="clean.navigator" depends="clean.engine">
    <echo>Cleaning up navigator 2nd generation classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.navigator" />
      </fileset>
    </delete>
  </target>

  <!-- ====================================================================
       Navigator 2nd generation: API JavaDoc
       ==================================================================== -->

  <property name="dist.navigator.packagenames" value="
       net.ontopia.topicmaps.nav2.utils" />

  <property name="dev.navigator.packagenames" value="
       ${dist.navigator.packagenames},
       net.ontopia.topicmaps.nav.context,
       net.ontopia.topicmaps.nav.utils.grabbers,
       net.ontopia.topicmaps.nav.utils.stringifiers,
       net.ontopia.topicmaps.nav.utils.comparators,
       net.ontopia.topicmaps.nav.utils.deciders,
       net.ontopia.topicmaps.nav.taglibs.template,
       net.ontopia.topicmaps.nav2.core,
       net.ontopia.topicmaps.nav2.impl.basic,
       net.ontopia.topicmaps.nav2.taglibs.logic,
       net.ontopia.topicmaps.nav2.taglibs.output,
       net.ontopia.topicmaps.nav2.taglibs.value,
       net.ontopia.topicmaps.nav2.taglibs.TMvalue,
       net.ontopia.topicmaps.nav2.taglibs.framework,
       net.ontopia.topicmaps.nav2.impl.framework,
       net.ontopia.topicmaps.nav2.servlets,
       net.ontopia.topicmaps.nav2.webapps.ontopoly.model,
       net.ontopia.topicmaps.nav2.webapps.ontopoly.sysmodel,
       net.ontopia.topicmaps.nav2.webapps.ontopoly.utils,
       net.ontopia.topicmaps.nav2.realm
       " />

  <target name="javadoc.navigator" depends="init">
    <delete dir="${build.javadoc}/navigator" />
    <mkdir dir="${build.javadoc}/navigator" />
    <javadoc packagenames="${dev.navigator.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/navigator" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Navigator Framework documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">

      <!--link href="http://java.sun.com/products/jdk/1.2/docs/api/"/-->
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${java.path}/build/javadoc/navigator" />
  </target>

  <!-- ====================================================================
       Test-Environment for the Navigator 2nd Generation
       ==================================================================== -->

  <patternset id="sources.test.navigator">
    <include name="net/ontopia/utils/fakeJSP/*.java" />
    <include name="net/ontopia/topicmaps/nav2/impl/basic/test/*.java" />
    <include name="net/ontopia/topicmaps/nav2/impl/framework/test/*.java" />
    <include name="net/ontopia/topicmaps/nav2/plugins/test/*.java" />
    <include name="net/ontopia/topicmaps/nav2/utils/test/*.java" />
    <include name="net/ontopia/topicmaps/nav2/webapps/ted/test/**/*.java"/>
    <!--include name="net/ontopia/topicmaps/nav2/webapps/ontopoly/*/test/**/*.java"/-->
    <include name="net/ontopia/topicmaps/nav2/portlets/pojos/test/*.java" />
  </patternset>

  <patternset id="classes.test.navigator">
    <include name="net/ontopia/utils/fakeJSP/*.class" />
    <include name="net/ontopia/topicmaps/nav2/impl/basic/test/*.class" />
    <include name="net/ontopia/topicmaps/nav2/impl/framework/test/*.class" />
    <include name="net/ontopia/topicmaps/nav2/plugins/test/*.class" />
    <include name="net/ontopia/topicmaps/nav2/utils/test/*.class" />
    <include name="net/ontopia/topicmaps/nav2/webapps/ted/test/**/*.class"/>
    <!--include name="net/ontopia/topicmaps/nav2/webapps/ontopoly/**/test/**/*.class"/-->
    <include name="net/ontopia/topicmaps/nav2/portlets/pojos/test/*.class" />
  </patternset>

  <target name="compile.test.navigator" depends="compile.test.engine,compile.navigator">
    <echo>Compiling test cases for navigator 2nd generation...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="false" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.navigator" />
    </javac>
  </target>

  <target name="clean.test.navigator" depends="clean.navigator">
    <echo>Cleaning up test cases for navigator 2nd generation...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.navigator" />
      </fileset>
    </delete>
  </target>


  <!-- ====================================================================
       Web-Editor: compile, jar, clean
       ==================================================================== -->

  <patternset id="sources.webed">
    <include name="net/ontopia/products/WebEditor.java" />
    <include name="net/ontopia/topicmaps/webed/core/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/basic/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/utils/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/association/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/assocrole/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/basename/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/occurrence/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/tmobject/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topic/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topicmap/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/variant/*.java" />
    <include name="net/ontopia/topicmaps/webed/servlets/*.java" />
    <include name="net/ontopia/topicmaps/webed/taglibs/*.java" />
    <include name="net/ontopia/topicmaps/webed/taglibs/form/*.java" />
    <include name="net/ontopia/topicmaps/webed/utils/*.java" />
    <include name="net/ontopia/topicmaps/webed/webapps/omnieditor/*.java" />
  </patternset>

  <patternset id="classes.webed">
    <include name="net/ontopia/products/WebEditor.class" />
    <include name="net/ontopia/topicmaps/webed/core/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/basic/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/utils/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/association/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/assocrole/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/basename/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/occurrence/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/tmobject/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topic/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topicmap/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/variant/*.class" />
    <include name="net/ontopia/topicmaps/webed/servlets/*.class" />
    <include name="net/ontopia/topicmaps/webed/taglibs/*.class" />
    <include name="net/ontopia/topicmaps/webed/taglibs/form/*.class" />
    <include name="net/ontopia/topicmaps/webed/utils/*.class" />
    <include name="net/ontopia/topicmaps/webed/webapps/omnieditor/*.class" />
    <include name="*.vm" />
  </patternset>

  <patternset id="sources.test.webed">
    <include name="net/ontopia/topicmaps/webed/impl/basic/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topic/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topicmap/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/association/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/impl/utils/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/utils/test/*.java" />
    <include name="net/ontopia/topicmaps/webed/test/**/*.java" />
    <include name="net/ontopia/topicmaps/webed/webapps/omnieditor/test/*.java" />
  </patternset>

  <patternset id="classes.test.webed">
    <include name="net/ontopia/topicmaps/webed/impl/basic/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topic/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/topicmap/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/actions/association/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/utils/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/impl/utils/test/*.class" />
    <include name="net/ontopia/topicmaps/webed/test/**/*.class" />
    <include name="net/ontopia/topicmaps/webed/webapps/omnieditor/test/*.class" />
  </patternset>

  <target name="compile.webed" depends="compile.navigator">
    <echo>Compiling web editor classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.webed" />
    </javac>
    <echo>Copying velocity macros...</echo>
    <copy todir="${build.classes}/" overwrite="yes">
      <fileset refid="oks.vms" />
    </copy>
  </target>

  <target name="compile.test.webed" depends="compile.test.navigator,compile.webed">
    <echo>Compiling web editor test classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.webed" />
    </javac>
  </target>

  <target name="clean.webed" depends="clean.navigator">
    <echo>Cleaning up web editor classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.webed" />
      </fileset>
    </delete>
  </target>

  <target name="clean.test.webed" depends="clean.webed">
    <echo>Cleaning up web editor test classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.webed" />
      </fileset>
    </delete>
  </target>

  <!-- ====================================================================
       Web-Editor: API JavaDoc
       ==================================================================== -->

  <property name="dist.webed.packagenames" value="
             net.ontopia.topicmaps.webed.core,
             net.ontopia.topicmaps.webed.utils" />

  <property name="dev.webed.packagenames" value="
             net.ontopia.topicmaps.webed.impl.actions,
             net.ontopia.topicmaps.webed.impl.basic,
             net.ontopia.topicmaps.webed.impl.utils,
             net.ontopia.topicmaps.webed.taglibs.form,
             net.ontopia.topicmaps.webed.servlets,
             net.ontopia.topicmaps.nav2.webapps.ted,
             net.ontopia.topicmaps.nav2.webapps.ted.model,
             net.ontopia.topicmaps.nav2.webapps.ted.actions,
             ${dist.webed.packagenames}" />

  <target name="javadoc.webed" depends="init">
    <delete dir="${build.javadoc}/webed" />
    <mkdir dir="${build.javadoc}/webed" />
    <javadoc packagenames="${dev.webed.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/webed" author="true" version="true" verbose="false" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="Ontopia Web Editor Framework API documentation" header="&lt;img src='{@docroot}/logo.gif'&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
      <!--link href="http://java.sun.com/products/jdk/1.2/docs/api/"/-->
    </javadoc>
    <replace file="${java.path}/build/javadoc/webed/overview-frame.html" token="{@docroot}" value="." />
    <copy file="${3rdparty.path}/images/logo.gif" todir="${java.path}/build/javadoc/webed" />
  </target>

  <!-- ======================================================================
       Distribute current OKS release
       ==================================================================== -->

  <target name="distribute.oks" depends="dist.oks.init">
    <antcall target="distribute.oks.local" />
    <antcall target="distribute.oks.web.current" />
    <antcall target="distribute.oks.web.freedownload" />
  </target>

  <target name="distribute.oks.props" depends="dist.oks.init">
    <property name="dist.local.path" value="/Volumes/ontopia/graph/data/dev/releases"/>
    <property name="dist.host.web" value="www.ontopia.net"/>
    <property name="dist.host.web.user" value="webadmin"/>
    <property name="dist.host.web.path" value="/home/webadmin/ontopia.net/html"/>
  </target>

  <target name="distribute.oks.local" depends="dist.oks.init,distribute.oks.props">

    <echo>1. Creating release directory: '${dist.local.path}/oks-${dist.version}'</echo>
    <exec executable="mkdir">
      <arg value="-p" />
      <arg value="${dist.local.path}/oks-${dist.version}" />
    </exec>

    <echo>2. Copying distributions...</echo>
    <exec executable="cp">
      <arg value="${build.dists}/oks-enterprise-${dist.full.version}.zip" />
      <arg value="${build.dists}/installers/oks-samplers.jar" />
      <arg value="${dist.local.path}/oks-${dist.version}" />
    </exec>

  </target>

  <target name="distribute.oks.web.current" depends="dist.oks.init,distribute.oks.props">
    <property name="dist.host.web.products.category" value="current" />
    <antcall target="_distribute.oks.web.products" />
  </target>

  <target name="distribute.oks.web.previous" depends="dist.oks.init,distribute.oks.props">
    <property name="dist.host.web.products.category" value="previous" />
    <antcall target="_distribute.oks.web.products" />
  </target>

  <target name="distribute.oks.web.beta" depends="dist.oks.init,distribute.oks.props">
    <property name="dist.host.web.products.category" value="beta2" />
    <antcall target="_distribute.oks.web.products" />
  </target>

  <target name="_distribute.oks.web.products" depends="dist.oks.init,distribute.oks.props">

    <property name="dist.host.web.products.category" value="invalid" />
    <property name="dist.host.web.products.path" value="${dist.host.web.path}/customers/${dist.host.web.products.category}" />

    <echo>1. Removing releases from: '${dist.host.web.user}@${dist.host.web}:${dist.host.web.products.path}'</echo>
    <exec executable="ssh">
      <arg value="${dist.host.web.user}@${dist.host.web}" />
      <arg value="rm ${dist.host.web.products.path}/oks-*" />
    </exec>

    <echo>2. Copying distributions...</echo>
    <exec executable="scp" output="scp.log">
      <arg value="-v" />
      <arg value="${build.dists}/oks-enterprise-${dist.full.version}.zip" />
      <arg value="${build.dists}/oks-samplers-${dist.full.version}.zip" />
      <arg value="${dist.host.web.user}@${dist.host.web}:${dist.host.web.products.path}/" />
    </exec>

    <echo>3. Generating what's new document...</echo>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/oks/whatsnew.xml" />
    </antcall>
    <copy file="${doc.path}/developer/oks/whatsnew.xml.html" tofile="${build.doc}/whatsnew-oks.html" />

    <echo>4. Copying what's new document to customers page...</echo>
    <exec executable="scp">
      <!-- If public key files are present on client and server
           it is possible to avoid the prompt for the password phrase -->
      <!-- arg value="-B"/-->
      <arg path="${build.doc}/whatsnew-oks.html" />
      <arg path="${doc.path}/stylesheets/whitepapers.css" />
      <arg line="${dist.host.web.user}@${dist.host.web}:${dist.host.web.products.path}/" />
    </exec>

  </target>

  <target name="distribute.oks.web.freedownload" depends="dist.oks.init,distribute.oks.props">

    <echo>1. Copying free download...</echo>
    <exec executable="scp">
      <arg value="${build.dists}/installers/oks-samplers.jar" />
      <arg value="${dist.host.web.user}@${dist.host.web}:${dist.host.web.path}/../cgi-data/" />
    </exec>
    <exec executable="scp">
      <arg value="${build.dists}/oks-samplers/doc/install.html" />
      <arg value="${dist.host.web.user}@${dist.host.web}:${dist.host.web.path}/download/oks-samplers-install.html" />
    </exec>

    <echo>2. Generating what's new document...</echo>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/oks/whatsnew.xml" />
    </antcall>
    <copy file="${doc.path}/developer/oks/whatsnew.xml.html" tofile="${build.doc}/whatsnew-oks.html" />

    <echo>3. Copying what's new document to free downloads page...</echo>
    <exec executable="scp">
      <arg path="${build.doc}/whatsnew-oks.html" />
      <arg path="${doc.path}/stylesheets/whitepapers.css" />
      <arg line="${dist.host.web.user}@${dist.host.web}:${dist.host.web.path}/download/" />
    </exec>

  </target>

  <!-- ======================================================================
       Ontopia Knowledge Suite distributions
       ==================================================================== -->

  <target name="check-jvm">
    <property name="jvm.version" value="1.5"/>
    <java classname="net.ontopia.products.CheckJVMVersion" failonerror="true"
          classpathref="project.class.path">   
      <arg value="${jvm.version}"/>
    </java>
  </target>

  <target name="dist.oks.init" depends="init">
    <!-- Distribution properties -->
    <property name="dist.version.major" value="4"/>
    <property name="dist.version.minor" value="1"/>
    <property name="dist.version.micro" value="0"/>
    <property name="dist.is.beta"       value="0"/> <!-- beta if greater than zero -->
    <property name="dist.version" value="${dist.version.major}.${dist.version.minor}.${dist.version.micro}"/>
    <property name="oks.version" value="{'MAJOR_VERSION': ${dist.version.major}, 'MINOR_VERSION': ${dist.version.minor}, 'MICRO_VERSION': ${dist.version.micro}, 'BETA_VERSION': ${dist.is.beta}}"/>
    <tstamp><format property="dist.date" pattern="yyyyMMdd" /></tstamp>
    <tstamp><format property="dist.full.date" pattern="yyyy-MM-dd" /></tstamp>
    <property name="dist.full.version" value="${dist.version}-${dist.date}"/>
  </target>

  <target name="dist.ontopia" depends="clean.build, dist.oks.init">
    <antcall target="dist.oks.enterprise" />
  </target>

  <target name="dist.oks.echo">
    <echo>Building ${dist.title}...</echo>
    <echo> - version is '${dist.version}'</echo>
    <echo> - compiler is '${build.compiler}'</echo>
    <echo> - jvm is '${ant.java.version}'</echo>
  </target>

  <!-- - - - OKS Enterprise Edition  - - - - - - - - - - - - - - - - - - - - -->

  <target name="dist.oks.enterprise" depends="dist.oks.init,check-jvm">
    <!-- Build properties -->
    <property name="dist.title" value="OKS Enterprise Edition" />
    <property name="dist.name" value="oks-enterprise" />
    <property name="dist.shortname" value="enterprise" />
    <property name="dist.path" value="${build.root}/dists/${dist.name}-${dist.version}" />
    <property name="dist.condition" value="ent" />

    <antcall target="dist.oks.echo"/>
    <antcall target="clean.classes"/>

    <!-- Clean distribution directory -->
    <delete dir="${build.tmp}" />
    <delete dir="${dist.path}" />
    <mkdir dir="${dist.path}" />

    <!-- Build product structures -->
    <antcall target="dist.product.build" />
    <antcall target="dist.engine.build" />
    <antcall target="dist.navigator.build" />
    <antcall target="dist.fulltext.build" />
    <antcall target="dist.query.build" />
    <antcall target="dist.schema.build" />
    <antcall target="dist.webed.build" />
    <antcall target="dist.viz.build" />
    <antcall target="dist.db2tm.build" />
    <antcall target="dist.tmrap.build" />
    <antcall target="dist.rdbms.build" />

    <!-- Collect product structures -->
    <antcall target="dist.product.collect" />
    <antcall target="dist.engine.collect" />
    <antcall target="dist.navigator.collect" />
    <antcall target="dist.navigator.test.collect" />
    <antcall target="dist.fulltext.collect" />
    <antcall target="dist.query.collect" />
    <antcall target="dist.schema.collect" />
    <antcall target="dist.webed.collect" />
    <antcall target="dist.viz.collect" />
    <antcall target="dist.db2tm.collect" />
    <antcall target="dist.tmrap.collect" />
    <antcall target="dist.rdbms.collect" />
    <antcall target="dist.classify.collect" />

    <!-- Collect jar files -->
    <copy file="${3rdparty.path}/tmapi.jar" todir="${dist.path}/lib" />
    <copy file="${3rdparty.path}/tmapi.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Collect product tests -->
    <antcall target="dist.engine.test.collect" />
    <antcall target="dist.navigator.test.collect" />
    <antcall target="dist.fulltext.test.collect" />
    <antcall target="dist.query.test.collect" />
    <antcall target="dist.schema.test.collect" />
    <antcall target="dist.webed.test.collect" />
    <antcall target="dist.viz.test.collect" />
    <antcall target="dist.db2tm.test.collect" />
    <antcall target="dist.tmrap.test.collect" />
    <antcall target="dist.rdbms.test.collect" />

    <!-- Test configuration -->
    <copy file="${java.path}/test-data/config/tests.xml" todir="${dist.path}/tests/test-data" />
    <copy file="${java.path}/dist/tests/tests-oks-enterprise.xml" tofile="${dist.path}/tests/test-data/tests-oks.xml" />

    <!-- Test scripts -->
    <copy file="${java.path}/dist/tests/runtests-engine.sh" tofile="${dist.path}/tests/runtests-engine.sh" />
    <copy file="${java.path}/dist/tests/runtests-engine.bat" tofile="${dist.path}/tests/runtests-engine.bat" />
    <copy file="${java.path}/dist/tests/runtests-navigator.sh" tofile="${dist.path}/tests/runtests-navigator.sh" />
    <copy file="${java.path}/dist/tests/runtests-navigator.bat" tofile="${dist.path}/tests/runtests-navigator.bat" />
    <copy file="${java.path}/dist/tests/runtests-webed.sh" tofile="${dist.path}/tests/runtests-webed.sh" />
    <copy file="${java.path}/dist/tests/runtests-webed.bat" tofile="${dist.path}/tests/runtests-webed.bat" />
    <copy file="${java.path}/dist/tests/runtests-rdbms.sh" tofile="${dist.path}/tests/runtests-rdbms.sh" />
    <copy file="${java.path}/dist/tests/runtests-rdbms.bat" tofile="${dist.path}/tests/runtests-rdbms.bat" />

    <!-- Fix permissions -->
    <chmod dir="${dist.path}/tests" perm="a+rx" includes="*.sh" />

    <!-- Build jar files -->
    <antcall target="jar.oks.enterprise" />
    <antcall target="jar.oks.enterprise.test" />

    <copy file="${build.jars}/${dist.name}.jar" todir="${dist.path}/lib" />
    <copy file="${build.jars}/${dist.name}-test.jar" todir="${dist.path}/lib" />
    <copy file="${build.jars}/${dist.name}.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Collect index.html -->
    <antcall target="dist.index.html">
      <param name="index.file" value="docindex-index-enterprise.html" />
      <param name="index.product" value="Enterprise Edition" />
    </antcall>
    <!-- Copy templates -->
    <mkdir dir="${dist.path}/config/vm-templates" />
    <copy todir="${dist.path}/config/vm-templates">
      <fileset dir="${src.path}/webapps/webedtest/WEB-INF/templates" />
    </copy>
    <!-- Generate JSP 1.1 TLD files -->
    <antcall target="dist.tld.1.1" />
    <!-- Copy JSP 1.2 TLD files -->
    <mkdir dir="${dist.path}/config/jsp-12" />
    <copy todir="${dist.path}/config/jsp-12">
      <fileset dir="${src.path}/webapps/webedtest/WEB-INF/jsp" />
    </copy>

    <!-- Vizigator -->
    <mkdir dir="${dist.path}/bin" />
    <copy file="${java.path}/dist/vizigator/vizdesktop-ent.bat" tofile="${dist.path}/bin/vizdesktop.bat" />
    <copy file="${java.path}/dist/vizigator/vizdesktop-ent.sh" tofile="${dist.path}/bin/vizdesktop.sh" />
    <chmod dir="${dist.path}/bin" perm="a+rx" includes="*.sh" />

    <!-- Add accessctl web application -->
    <antcall target="dist.oks.webapp.accessctl" />

    <!-- Replace ROOT web application -->
    <antcall target="dist.oks.webapp.root" />

    <!-- Generate javadoc -->
    <antcall target="javadoc.oks.enterprise" />
    <copy todir="${dist.path}/doc/api">
      <fileset dir="${build.javadoc}/enterprise" />
    </copy>

    <!-- Generate jardigests -->
    <antcall target="jar.digests" />

    <!-- Package it -->
    <exec dir="${build.dists}" executable="zip">
      <arg value="-r" />
      <arg value="${dist.name}-${dist.full.version}.zip" />
      <arg value="${dist.name}-${dist.version}" />
    </exec>

  </target>

  <target name="javadoc.oks.enterprise" depends="init">
    <delete dir="${build.javadoc}/enterprise" />
    <mkdir dir="${build.javadoc}/enterprise" />
    <javadoc packagenames="
             ${dist.engine.packagenames},
             ${dist.navigator.packagenames},
             ${dist.fulltext.packagenames},
             ${dist.query.packagenames},
             ${dist.schema.packagenames},
             ${dist.webed.packagenames},
             ${dist.db2tm.packagenames},
             ${dist.rdbms.packagenames}
             " sourcepath="${java.path}" destdir="${build.javadoc}/enterprise" author="true" version="true" use="true" public="true" windowtitle="Ontopia Knowledge Suite - Enterprise Edition" doctitle="Ontopia Knowledge Suite API documentation" header="&lt;img src='{@docroot}/logo.gif'&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;" classpathref="project.class.path">
      <group title="Core Topic Map Packages" packages="net.ontopia.topicmaps.*" />
      <group title="Core Information Set Packages" packages="net.ontopia.infoset.*" />
      <group title="Query Engine Packages" packages="net.ontopia.topicmaps.query.*" />
      <group title="Full-text Integration Packages" packages="net.ontopia.infoset.fulltext.*" />
      <group title="Schema Tools Packages" packages="net.ontopia.topicmaps.schema.*" />
      <group title="Web Editor Packages" packages="net.ontopia.topicmaps.webed.*" />
      <group title="Navigator Framework Packages" packages="net.ontopia.topicmaps.nav.*:net.ontopia.topicmaps.nav2.*" />
      <group title="RDBMS Backend Connector Packages" packages="net.ontopia.topicmaps.impl.rdbms" />
    </javadoc>
    <replace file="${build.javadoc}/enterprise/overview-frame.html" token="{@docroot}" value="." />
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/enterprise" />
  </target>

  <target name="javadoc.oks.enterprise.dev" depends="init">
    <delete dir="${build.javadoc}/enterprise-dev" />
    <mkdir dir="${build.javadoc}/enterprise-dev" />
    <javadoc packagenames="
             ${dev.engine.packagenames},
             ${dev.navigator.packagenames},
             ${dev.fulltext.packagenames},
             ${dev.query.packagenames},
             ${dev.schema.packagenames},
             ${dev.webed.packagenames},
             ${dev.rdbms.packagenames}
             " sourcepath="${java.path}" destdir="${build.javadoc}/enterprise-dev" author="true" version="true" use="true" public="true" windowtitle="Ontopia Knowledge Suite - Enterprise Edition" doctitle="Ontopia Knowledge Suite API documentation" header="&lt;img src='{@docroot}/logo.gif'&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;" classpathref="project.class.path">
      <group title="Core Topic Map Packages" packages="net.ontopia.topicmaps.*" />
      <group title="Core Information Set Packages" packages="net.ontopia.infoset.*" />
      <group title="Query Engine Packages" packages="net.ontopia.topicmaps.query.*" />
      <group title="Full-text Integration Packages" packages="net.ontopia.infoset.fulltext.*" />
      <group title="Schema Tools Packages" packages="net.ontopia.topicmaps.schema.*" />
      <group title="Web Editor Packages" packages="net.ontopia.topicmaps.webed.*" />
      <group title="Navigator Framework Packages" packages="net.ontopia.topicmaps.nav.*:net.ontopia.topicmaps.nav2.*" />
      <group title="RDBMS Backend Connector Packages" packages="net.ontopia.topicmaps.impl.rdbms" />
    </javadoc>
    <replace file="${build.javadoc}/enterprise-dev/overview-frame.html" token="{@docroot}" value="." />
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/enterprise-dev" />
  </target>

  <target name="dist.jar.oks.enterprise" depends="dist.oks.init,check-jvm,bootstrap,clean.classes,compile.test.oks.enterprise,jar.oks.enterprise"/>
  <target name="dist.jar.oks.enterprise.test" depends="dist.oks.init,check-jvm,bootstrap,clean.classes,compile.test.oks.enterprise,jar.oks.enterprise,jar.oks.enterprise.test"/>

  <target name="dist.jar.oks.enterprise.noclean" depends="dist.oks.init,check-jvm,compile.test.oks.enterprise,jar.oks.enterprise"/>

  <target name="jar.digests">
    <exec dir="${dist.path}/lib" executable="sh" output="${dist.path}/lib/digests.txt">
      <arg value="${3rdparty.path}/jardigests.sh" />
      <arg value="*.jar" />
      <arg value="${dist.title} ${dist.version}" />
    </exec>
  </target>

  <target name="jar.oks.enterprise" depends="dist.oks.init,check-jvm">
    <property name="dist.name" value="oks-enterprise" />
    <delete file="${build.jars}/${dist.name}.jar" />
    <jar basedir="${build.classes}" jarfile="${build.jars}/${dist.name}.jar" manifest="${src.path}/manifests/manifest-ontopia.mf">
      <!-- engine -->
      <patternset refid="classes.engine" />
      <patternset refid="classes.tmapi" />
      <patternset refid="classes.cmdlineutils" />
      <!-- navigator -->
      <patternset refid="classes.navigator" />
      <!-- fulltext -->
      <patternset refid="classes.fulltext" />
      <!-- query -->
      <patternset refid="classes.query" />
      <!-- schema -->
      <patternset refid="classes.schema" />
      <!-- webed -->
      <patternset refid="classes.webed" />
      <!-- vizigator -->
      <patternset refid="classes.viz" />
      <patternset refid="images.viz" />
      <patternset refid="resources.viz" />
      <!-- db2tm -->
      <patternset refid="classes.db2tm" />
      <!-- rdbms -->
      <patternset refid="classes.rdbms" />
    </jar>
  </target>

  <!-- Makes sure that all neccessary classes are compiled before packaging oks-enterprise.jar -->
  <target name="compile.oks.enterprise" depends="compile.engine,compile.cmdlineutils,compile.navigator,compile.fulltext,compile.query,compile.schema,compile.webed,compile.db2tm,compile.rdbms,compile.viz" />

  <target name="compile.test.oks.enterprise" depends="compile.test.engine,compile.cmdlineutils,compile.test.navigator,compile.test.fulltext,compile.test.query,compile.test.schema,compile.test.webed,compile.test.db2tm,compile.test.rdbms,compile.viz" />

  <target name="jar.compile.oks.enterprise" depends="compile.oks.enterprise,jar.oks.enterprise" />

  <target name="jar.oks.enterprise.test" depends="dist.oks.init">
    <property name="dist.name" value="oks-enterprise" />
    <delete file="${build.jars}/${dist.name}-test.jar" />
    <jar basedir="${build.classes}" jarfile="${build.jars}/${dist.name}-test.jar" manifest="${java.path}/dist/manifests/manifest-test.mf">
      <!-- engine -->
      <patternset refid="classes.test.engine" />
      <patternset refid="classes.test.tmapi" />
      <!-- navigator -->
      <patternset refid="classes.test.navigator" />
      <!-- fulltext -->
      <patternset refid="classes.test.fulltext" />
      <!-- query -->
      <patternset refid="classes.test.query" />
      <!-- schema -->
      <patternset refid="classes.test.schema" />
      <!-- webed -->
      <patternset refid="classes.test.webed" />
      <!-- db2tm -->
      <patternset refid="classes.test.db2tm" />
      <!-- rdbms -->
      <patternset refid="classes.test.rdbms" />
    </jar>
  </target>

  <patternset id="sources.test.webed.actions">
    <include name="net/ontopia/topicmaps/webed/test/actions/*.java" />
  </patternset>
  
  <patternset id="classes.test.webed.actions">
    <include name="net/ontopia/topicmaps/webed/test/actions/*.class" />
  </patternset>

  <target name="compile.test.webed.actions" depends="init">
    <echo>Compiling web editor test action classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.webed.actions" />
    </javac>
  </target>

  <target name="clean.test.webed.actions" depends="init">
    <echo>Cleaning up web editor action classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.webed.actions" />
      </fileset>
    </delete>
  </target>
        
  <target name="jar.oks.webed.test" depends="init">
    <delete file="${build.jars}/oks-webed-test.jar" />
    <jar basedir="${build.classes}" jarfile="${build.jars}/oks-webed-test.jar">
      <patternset refid="classes.test.webed.actions" />
    </jar>
  </target>
  
  <target name="dist.oks.test.webed" depends="init">
    <antcall target="clean.test.webed.actions" />
    <antcall target="compile.test.webed.actions" />
    <antcall target="jar.oks.webed.test" />
  </target>
      
  <!-- abstract target: do not call on it's own -->
  <target name="dist.oks.enterprise.war" depends="dist.oks.init">
    <property name="omnigator" value="${dist.path}/apache-tomcat/webapps/omnigator" />
    <war warfile="${dist.path}/omnigator.war" webxml="${omnigator}/WEB-INF/web.xml">
      <fileset dir="${omnigator}" />
      <lib dir="${dist.path}/apache-tomcat/common/lib" />
    </war>
  </target>

  <!-- - - - OKS Online Demo  - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="dist.oks.demo.online" depends="dist.oks.init">

    <property name="dist.name" value="oks-online-demo" />
    <property name="dist.name.source" value="oks-enterprise-${dist.version}" />
    <property name="dist.path" value="${build.root}/dists/${dist.name}" />
    <property name="dist.path.source" value="${build.root}/dists/${dist.name.source}" />

    <!-- Make a copy of an existing build -->
    <delete dir="${dist.path}" />
    <copy todir="${dist.path}">
      <fileset dir="${dist.path.source}" />
    </copy>

    <!-- Remove everything we don't need -->
    <delete file="${dist.path}/index.html" />
    <delete dir="${dist.path}/doc" />
    <delete dir="${dist.path}/lib" />
    <delete dir="${dist.path}/utils" />
    <delete dir="${dist.path}/tests" />
    <delete dir="${dist.path}/samples" />

    <delete dir="${dist.path}/apache-tomcat/webapps/accessctl" />
    <delete dir="${dist.path}/apache-tomcat/webapps/balancer" />
    <delete dir="${dist.path}/apache-tomcat/webapps/jsp-examples" />
    <delete dir="${dist.path}/apache-tomcat/webapps/ontopoly" />
    <delete dir="${dist.path}/apache-tomcat/webapps/ROOT" />
    <delete dir="${dist.path}/apache-tomcat/webapps/servlets-examples" />
    <delete dir="${dist.path}/apache-tomcat/webapps/tomcat-docs" />
    <delete dir="${dist.path}/apache-tomcat/webapps/webdav" />

    <delete dir="${dist.path}/apache-tomcat/webapps/manage" />
    <delete dir="${dist.path}/apache-tomcat/webapps/omnigator/plugins/edit" />

    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/ADL-FTT.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/GCL-2-1.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/JillsMusic.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/KevinsPlan.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/MyConcerts.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/MyMusic.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/MyPlan.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/MyThesaurus.xtm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/TapsasConcerts.xtm" />

    <!-- Generate fulltext indexes for all topic maps -->
    <echo>Generating fulltext indexes...</echo>
    <mkdir dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/indexes" />
    <exec dir="${java.path}" executable="jython">
      <arg value="${java.path}/dist/scripts/generate-fulltext-indexes.py" />
      <arg value="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps" />
      <arg value="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/indexes" />
    </exec>

    <!-- Add operamap web application -->
    <antcall target="dist.oks.webapp.operamap" />

    <!-- Add logsearcher web application -->
    <echo>Adding logsearcher web application...</echo>
    <copy todir="${dist.path}/apache-tomcat/webapps/logsearcher">
      <fileset dir="${src.path}/webapps/logsearcher" />
    </copy>

    <!-- Tweak omnigator web application (disable some plugins) -->
    <copy file="${src.path}/webapps/omnigator/plugins/plugins/plugin.off.xml" tofile="${dist.path}/apache-tomcat/webapps/omnigator/plugins/plugins/plugin.xml" overwrite="yes" />
    <copy file="${src.path}/webapps/omnigator/plugins/validator/plugin.off.xml" tofile="${dist.path}/apache-tomcat/webapps/omnigator/plugins/validator/plugin.xml" overwrite="yes" />
    <copy file="${src.path}/webapps/omnigator/plugins/merge/plugin.off.xml" tofile="${dist.path}/apache-tomcat/webapps/omnigator/plugins/merge/plugin.xml" overwrite="yes" />
    <copy file="${src.path}/webapps/omnigator/plugins/tolog/plugin.off.xml" tofile="${dist.path}/apache-tomcat/webapps/omnigator/plugins/tolog/plugin.xml" overwrite="yes" />
    <copy file="${src.path}/webapps/omnigator/plugins/samples/plugin.off.xml" tofile="${dist.path}/apache-tomcat/webapps/omnigator/plugins/samples/plugin.xml" overwrite="yes" />

    <!-- Replace server.xml -->
    <copy file="${java.path}/dist/tomcat/tomcat55/server-online-demo.xml" 
        tofile="${dist.path}/apache-tomcat/conf/server.xml" overwrite="yes" />

    <!-- Enable Tomcat-Apache connector -->
    <mkdir dir="${dist.path}/apache-tomcat/conf/jk" />
    <copy file="${java.path}/dist/tomcat/tomcat55/workers.properties" 
        tofile="${dist.path}/apache-tomcat/conf/jk/workers.properties" overwrite="yes" />

    <delete file="${dist.path}/apache-tomcat/conf/Catalina/localhost/balancer.xml" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/license.jsp" />

    <!-- Package it -->
    <exec dir="${build.dists}" executable="zip">
      <arg value="-r" />
      <arg value="${dist.name}-${dist.full.version}.zip" />
      <arg value="${dist.name}" />
    </exec>

    <!--echo>1. Copying new release to: 'sandbox:/tmp'</echo>
    <exec executable="scp">
      <arg value="${build.dists}/${dist.name}-${dist.full.version}.zip" />
      <arg value="sandbox.ontopia.net:/tmp/" />
    </exec-->

    <!--
    <echo>2. Removing old online demo</echo>
    <exec executable="ssh">
      <arg value="sandbox.ontopia.net"/>
      <arg value="rm -rf /usr/local/oks-online-demo"/>
    </exec>

    <echo>3. Untarring new release to /usr/local/oks-online-demo</echo>

    <echo>4. Changing ownership  'chown -R omnigator:ontopia /usr/local/oks-online-demo'</echo>

    <echo>4. Restarting online demo '/etc/init.d/omnigator restart'</echo>

    <echo>5. Restarting apache '/etc/init.d/apace restart'</echo>
      -->

  </target>

  <!-- - - - Collect web applications - - - - - - - - - - - - - - - - - - - -->

  <target name="dist.oks.webapp.i18n">
    <!-- Add i18n web application -->
    <echo>Adding i18n web application...</echo>
    <copy todir="${dist.path}/apache-tomcat/webapps/i18n">
      <fileset dir="${src.path}/webapps/i18n" />
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/i18n/WEB-INF/work" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/i18n/WEB-INF/classes" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/i18n/WEB-INF/lib" />
    <!-- Generate fulltext index -->
    <echo>Generating i18n fulltext index...</echo>
    <antcall target="compile.fulltext" />
  </target>

  <target name="dist.oks.webapp.operamap">
    <!-- Add operamap web application -->
    <echo>Adding operamap web application...</echo>
    <copy todir="${dist.path}/apache-tomcat/webapps/operamap">
      <fileset dir="${src.path}/webapps/operamap" />
    </copy>
    <!-- Copy operamap information resources -->
    <copy todir="${dist.path}/apache-tomcat/webapps/operamap/occurs/composer">
      <fileset dir="${topicmaps.path}/opera/occurs/composer" />
    </copy>
    <copy todir="${dist.path}/apache-tomcat/webapps/operamap/occurs/librettist">
      <fileset dir="${topicmaps.path}/opera/occurs/librettist" />
    </copy>
    <copy todir="${dist.path}/apache-tomcat/webapps/operamap/occurs/opera">
      <fileset dir="${topicmaps.path}/opera/occurs/opera" />
    </copy>
    <copy todir="${dist.path}/apache-tomcat/webapps/operamap/occurs/theatre">
      <fileset dir="${topicmaps.path}/opera/occurs/theatre" />
    </copy>
    <!-- Copy fulltext index -->
    <copy todir="${dist.path}/apache-tomcat/webapps/operamap/WEB-INF/indexes/opera.ltm">
      <fileset dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/indexes/opera.ltm" />
    </copy>
  </target>

  <target name="dist.oks.webapp.xmltools">
    <!-- Add xmltools web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/xmltools">
      <fileset dir="${src.path}/webapps/xmltools" />
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/xmltools/WEB-INF/classes" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/xmltools/WEB-INF/lib" />
  </target>

  <target name="dist.oks.webapp.manage">
    <!-- Add manage web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/manage">
      <fileset dir="${src.path}/webapps/manage" />
    </copy>
  </target>

  <target name="dist.oks.webapp.accessctl">
    <!-- Add accessctl web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/accessctl">
      <fileset dir="${src.path}/webapps/accessctl" />
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/accessctl/WEB-INF/config/tm-sources.xml" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/accessctl/WEB-INF/topicmaps" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/accessctl/WEB-INF/lib" />
    <copy file="${src.path}/webapps/accessctl/WEB-INF/topicmaps/userman.ltm"
        tofile="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/userman.ltm" overwrite="yes"/>
    <copy file="${doc.path}/developer/NAVIGATOR/userman.xml.html" 
        tofile="${dist.path}/doc/navigator/userman.html" />

    <!-- Replace server.xml -->
    <copy file="${java.path}/dist/tomcat/tomcat55/server-proent.xml" 
        tofile="${dist.path}/apache-tomcat/conf/server.xml" overwrite="yes" />
  </target>

  <target name="dist.oks.webapp.contacts">
    <!-- Add contacts web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/contacts">
      <fileset dir="${src.path}/webapps/contacts" />
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/contacts/WEB-INF/classes" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/contacts/WEB-INF/lib" />
  </target>

  <target name="dist.oks.webapp.xmlconf">
    <!-- Add xmlconf web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/xmlconf">
      <fileset dir="${src.path}/webapps/xmlconf" />
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/xmlconf/WEB-INF/classes" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/xmlconf/WEB-INF/lib" />
  </target>

  <target name="dist.oks.webapp.ontoed">
    <!-- Add ontoed web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/ontoed">
      <fileset dir="${src.path}/webapps/ontoed" />
    </copy>
  </target>

  <!-- - - - Update taglib descriptors  - - - - - - - - - - - - - - - - - - -->

  <target name="jar.oks.resources" depends="init">
    <echo>Copying TLDs to META-INF...</echo>
    <copy todir="${build.classes}/META-INF/" overwrite="yes">
      <fileset dir="${src.path}/webapps/webedtest/WEB-INF/jsp/">
         <include name="*.tld" />
      </fileset>
    </copy>
    <echo>Copying VMs to build.classes...</echo>
    <copy todir="${build.classes}/" overwrite="yes">
      <fileset refid="oks.vms" />
    </copy>
    <echo>Building jar-file...</echo>
    <jar basedir="${build.classes}" jarfile="${build.jars}/oks-resources.jar">
      <patternset>
        <include name="*.vm" />
        <include name="META-INF/*.tld" />
      </patternset>
    </jar>
  </target>

  <fileset id="oks.tlds" dir="${src.path}/webapps/webedtest/WEB-INF/jsp/">
    <include name="*.tld" />
  </fileset>

  <!-- Make sure TLDs are up to date -->
  <target name="prepare.tlds">
    <copy todir="${src.path}/webapps/contacts/WEB-INF/jsp/" overwrite="yes">
      <fileset refid="oks.tlds" />
    </copy>
    <copy todir="${src.path}/webapps/operamap/WEB-INF/jsp/" overwrite="yes">
      <fileset refid="oks.tlds" />
    </copy>
    <copy todir="${src.path}/webapps/xmlconf/WEB-INF/jsp/" overwrite="yes">
      <fileset refid="oks.tlds" />
    </copy>
  </target>

  <!-- - - - Update velocity macros - - - - - - - - - - - - - - - - - - - - -->

  <fileset id="oks.vms" dir="${basedir}/src/webapps/webedtest/WEB-INF/templates/">
    <include name="*.vm" />
  </fileset>

  <!-- - - - Collect common product structure - - - - - - - - - - - - - - - -->

  <target name="dist.product.collect">
    <echo>Collecting product components...</echo>
    <copy todir="${dist.path}">
      <fileset dir="${build.dists}/product-common" />
    </copy>
  </target>

  <!-- - - - Build engine components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.engine.build">
    <echo>Building engine components...</echo>

    <!-- Build jar files -->
    <antcall target="compile.engine" />
    <antcall target="compile.cmdlineutils" />
    <antcall target="compile.test.engine" />
    <antcall target="jar.oks.resources" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/engine-api/engine-api.xml" />
    </antcall>

  </target>

  <!-- - - - Collect engine components - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.engine.collect">
    <echo>Collecting engine components...</echo>

    <!-- Collect engine documentation -->
    <copy file="${doc.path}/developer/engine-api/engine-api.xml.html" tofile="${dist.path}/doc/engine/devguide.html" />
    <copy todir="${dist.path}/doc/engine">
      <fileset dir="${doc.path}/developer/engine-api">
        <patternset>
          <include name="*.gif" />
        </patternset>
        <patternset>
          <include name="*.png" />
        </patternset>
      </fileset>
    </copy>
  
    <!-- Compile code examples -->
    <javac srcdir="${doc.path}/developer/engine-api" 
          destdir="${doc.path}/developer/engine-api" optimize="${optimize}" 
          deprecation="${deprecation}" debug="${debug}" 
          debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="*.java" />
      </patternset>
    </javac>

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/engine" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/engine" />

  </target>

  <target name="dist.engine.test.collect">

    <!-- Test data -->
    <copy todir="${dist.path}/tests/test-data/canonical/baseline">
      <fileset dir="${java.path}/test-data/canonical/baseline" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/canonical/in">
      <fileset dir="${java.path}/test-data/canonical/in" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/canonical/extra">
      <fileset dir="${java.path}/test-data/canonical/extra" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/canonical/errors">
      <fileset dir="${java.path}/test-data/canonical/errors" />
    </copy>
    <mkdir dir="${dist.path}/tests/test-data/canonical/out" />

    <copy todir="${dist.path}/tests/test-data/merge/baseline">
      <fileset dir="${java.path}/test-data/merge/baseline" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/merge/in">
      <fileset dir="${java.path}/test-data/merge/in" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/metadata">
      <fileset dir="${java.path}/test-data/metadata" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/various">
      <fileset dir="${java.path}/test-data/various" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/ltm/baseline">
      <fileset dir="${java.path}/test-data/ltm/baseline" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/ltm/in">
      <fileset dir="${java.path}/test-data/ltm/in" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/ltm/extra">
      <fileset dir="${java.path}/test-data/ltm/extra" />
    </copy>

    <copy todir="${dist.path}/tests/test-data/rdf/baseline">
      <fileset dir="${java.path}/test-data/rdf/baseline" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/rdf/err">
      <fileset dir="${java.path}/test-data/rdf/err" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/rdf/in">
      <fileset dir="${java.path}/test-data/rdf/in" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/rdf/various">
      <fileset dir="${java.path}/test-data/rdf/various" />
    </copy>
    <mkdir dir="${dist.path}/tests/test-data/rdf/out" />

    <copy todir="${dist.path}/tests/test-data/tm2rdf/in">
      <fileset dir="${java.path}/test-data/rdf/in" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/tm2rdf/baseline">
      <fileset dir="${java.path}/test-data/tm2rdf/baseline" />
    </copy>
    <mkdir dir="${dist.path}/tests/test-data/rm2rdf/tmp" />

    <copy todir="${dist.path}/tests/test-data/tmrap">
      <fileset dir="${java.path}/test-data/tmrap" />
    </copy>

    <copy todir="${dist.path}/tests/test-data/tmsync">
      <fileset dir="${java.path}/test-data/tmsync" />
    </copy>

    <copy todir="${dist.path}/tests/test-data/xtm2">
      <fileset dir="${java.path}/test-data/xtm2" />
    </copy>
    <copy todir="${dist.path}/tests/test-data/cxtm">
      <fileset dir="${java.path}/test-data/cxtm" />
    </copy>

  </target>

  <!-- - - - Common product tasks  - - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.product.build">
    <echo>Building and collecting common product components...</echo>

    <!-- Build properties -->
    <property name="collect.path" value="${build.root}/dists/product-common" />

    <!-- Initialize the product directory -->
    <delete dir="${collect.path}" />
    <mkdir dir="${collect.path}" />

    <!-- Create lib directory -->
    <mkdir dir="${collect.path}/lib" />

    <!-- Collect common jar files -->
    <copy file="${3rdparty.path}/jaxp.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/crimson.jar" todir="${collect.path}/lib" />

    <copy file="${3rdparty.path}/getopt.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/log4j.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/antlr.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/junit.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/jing.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/jena.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/jakarta-oro.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/icu4j.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/xerces.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/trove.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/retrotranslator-runtime.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/backport-util-concurrent.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/acmeenc.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/touchgraph.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/commons-collections.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/commons-logging.jar" todir="${collect.path}/lib"/>

    <!-- Create samples directory -->
    <mkdir dir="${collect.path}/samples" />

    <!-- Collect topic maps -->
    <copy file="${topicmaps.path}/xmltools/xmltools-tm.xtm" todir="${collect.path}/samples" />
    <copy file="${topicmaps.path}/i18n/i18n.ltm" todir="${collect.path}/samples" />
    <copy file="${topicmaps.path}/ONTOPIA/jill.xtm" todir="${collect.path}/samples" />
    <copy file="${topicmaps.path}/ONTOPIA/support-kb.ltm" todir="${collect.path}/samples" />
    <copy file="${topicmaps.path}/opera/opera.ltm" todir="${collect.path}/samples" />
    <copy file="${doc.path}/developer/webeditor/tasks.ltm" todir="${collect.path}/samples/" />
    <copy file="${topicmaps.path}/3rdparty/pokemon.ltm" todir="${collect.path}/samples/" />
    <copy file="${topicmaps.path}/ted/MyMusic.xtm" todir="${collect.path}/samples/" />

    <copy file="${topicmaps.path}/metadata/dc.xtmm" todir="${collect.path}/samples/" />
    <copy file="${topicmaps.path}/metadata/dc.ltmm" todir="${collect.path}/samples/" />

    <copy file="${topicmaps.path}/rdf/mapping.rdff" todir="${collect.path}/samples/" />
    <copy file="${topicmaps.path}/3rdparty/music/KanzakisConcerts.rdf" todir="${collect.path}/samples/" />

    <!-- tm-standards.xtm  -->
    <gunzip src="${topicmaps.path}/autogen/tm-standards.xtm.gz" dest="${topicmaps.path}/autogen/tm-standards.xtm" />
    <copy file="${topicmaps.path}/autogen/tm-standards.xtm" todir="${collect.path}/samples" overwrite="yes" />

    <!-- Collect OSL schemas -->
    <copy file="${topicmaps.path}/i18n/i18n-schema.xml" tofile="${collect.path}/samples/i18n.ltm.osl" />
    <copy file="${topicmaps.path}/opera/opera.ltm.osl" tofile="${collect.path}/samples/opera.ltm.osl" />
    <copy file="${topicmaps.path}/ONTOPIA/jill-schema.xml" tofile="${collect.path}/samples/jill.xtm.osl" />
    <copy file="${topicmaps.path}/xmltools/xmltools-schema.xml" tofile="${collect.path}/samples/xmltools-tm.xtm.osl" />

    <!-- Collect DTDs -->
    <copy file="${java.path}/dtds/tmstrict.dtd" todir="${collect.path}/samples" />
    <copy file="${doc.path}/xtm/1.0/xtm1.dtd" todir="${collect.path}/samples" />

    <!-- Create doc directory -->
    <mkdir dir="${collect.path}/doc" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/oks/whatsnew.xml" />
    </antcall>
    <copy file="${doc.path}/developer/oks/whatsnew.xml.html" tofile="${collect.path}/doc/whatsnew.html" />
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/startup/startup.xml" />
    </antcall>
    <copy file="${doc.path}/developer/startup/startup.xml.html" tofile="${collect.path}/doc/install.html" />

    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/oks/welcome.xml" />
      <param name="make-toc" value="false" />
      <!-- do not create table of contents -->
    </antcall>
    <copy file="${doc.path}/developer/oks/welcome.xml.html" tofile="${collect.path}/doc/welcome.html" />

    <copy file="${doc.path}/developer/oks/copyrights.txt" todir="${collect.path}/doc" />

    <antcall target="makehtml">
      <param name="file" value="${doc.path}/whitepapers/atlas-tech/atlas-tech.xml" />
    </antcall>
    <copy file="${doc.path}/whitepapers/atlas-tech/atlas-tech.xml.html" tofile="${collect.path}/doc/misc/atlas-tech.html" />
    <copy todir="${collect.path}/doc/misc">
      <fileset dir="${doc.path}/whitepapers/atlas-tech">
        <patternset>
          <include name="*.gif" />
        </patternset>
        <patternset>
          <include name="*.png" />
        </patternset>
      </fileset>
    </copy>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${collect.path}/doc/misc" />

    <antcall target="makehtml">
      <param name="file" value="${doc.path}/tech-reports/ltm/ltm.xml" />
    </antcall>
    <copy file="${doc.path}/tech-reports/ltm/ltm.xml.html" tofile="${collect.path}/doc/misc/ltm.html" />

    <antcall target="makehtml">
      <param name="file" value="${doc.path}/tech-reports/rdf2tm/rdf2tm.xml" />
    </antcall>
    <copy file="${doc.path}/tech-reports/rdf2tm/rdf2tm.xml.html" tofile="${collect.path}/doc/misc/rdf2tm.html" />

    <!-- Include LTM 1.1 - 1.2 converter script -->
    <copy file="${java.path}/python/utils/ltmfix.py" todir="${collect.path}/utils" />
    <!-- Include LTM emacs mode -->
    <copy file="${java.path}/elisp/ltm-mode.el" todir="${collect.path}/utils" />

    <antcall target="makehtml">
      <param name="file" value="${doc.path}/xtm/cxtm/cxtm.xml" />
    </antcall>
    <copy file="${doc.path}/xtm/cxtm/cxtm.xml.html" tofile="${collect.path}/doc/misc/cxtm.html" />

    <!-- Copy stylesheets -->
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${collect.path}/doc" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${collect.path}/doc/misc" />

    <!-- Collect documentation -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${collect.path}/doc" />

    <!-- Generate index pages -->
    <echo message="Generating HTML index pages..." />
    <copy file="${java.path}/dist/doc/index-template.vm" overwrite="yes" 
        tofile="${build.tmp}/docindex-index-template.vm" />
    <copy file="${java.path}/dist/doc/control.vm" overwrite="yes" 
        tofile="${build.tmp}/docindex-control.vm" />
    <texen controlTemplate="docindex-control.vm" outputDirectory="${build.tmp}" 
           templatePath="${build.tmp}/" outputFile="generation.report" productName="" 
           productVersion="Version ${dist.version} builddate ${dist.full.date}" />

  </target>

  <!-- - - - OKS Samplers  - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="dist.oks.samplers" depends="dist.oks.init,check-jvm">

    <!-- Build properties -->
    <property name="dist.title" value="Ontopia Omnigator" />
    <property name="dist.name" value="oks-samplers" />
    <property name="dist.shortname" value="samplers" />
    <property name="dist.path" value="${build.root}/dists/${dist.name}" />

    <antcall target="dist.oks.echo"/>
    <antcall target="clean.classes"/>

    <!-- Clean distribution directory -->
    <delete dir="${build.tmp}" />
    <delete dir="${dist.path}" />
    <mkdir dir="${dist.path}" />

    <!-- Build components -->
    <antcall target="dist.product.build" />
    <antcall target="dist.engine.build" />
    <antcall target="dist.navigator.build" />
    <antcall target="dist.fulltext.build" />
    <antcall target="dist.query.build" />
    <antcall target="dist.schema.build" />
    <antcall target="dist.webed.build" />
    <antcall target="dist.viz.build" />

    <!-- Collect components -->
    <antcall target="dist.product.collect" />
    <antcall target="dist.engine.collect" />
    <antcall target="dist.navigator.collect" />
    <antcall target="dist.viz.collect" />

    <!-- Include omnigator plugins -->
    <mkdir dir="${dist.path}/apache-tomcat/webapps/omnigator/plugins" />
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins">
      <fileset dir="${src.path}/webapps/omnigator/plugins">
        <include name="tolog/*/**" />
        <include name="fulltext/*/**" />
        <include name="validator/*/**" />
        <exclude name="classify/*/**" />
      </fileset>
    </copy>

    <!-- Collect jar files -->
    <copy file="${3rdparty.path}/lucene.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/velocity.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/commons-fileupload.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/tasks.ltm" />
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/factbook.hytm" />

    <echo>Generating fulltext indexes...</echo>
    <mkdir dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/indexes" />
    <exec dir="${java.path}" executable="jython">
      <arg value="${java.path}/dist/scripts/generate-fulltext-indexes.py" />
      <arg value="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps" />
      <arg value="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/indexes" />
    </exec>

    <!-- Compile web applications -->
    <antcall target="dist.oks.omnigator.strip" />
    <antcall target="dist.oks.omnigator.compile" />
    <antcall target="dist.oks.ontopoly.compile" />

    <!-- Replace ROOT web application -->
    <antcall target="dist.oks.webapp.root.samplers" />

    <!-- Build jar files -->
    <antcall target="jar.oks.samplers" />
    <copy file="${build.jars}/${dist.name}.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Collect index.html -->
    <antcall target="dist.index.html">
      <param name="index.file" value="docindex-index-samplers.html" />
      <param name="index.product" value="OKS Samplers" />
    </antcall>

    <!-- Generate and collect install guide (samplers specific) -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/startup/startup-samplers.xml" />
    </antcall>
    <copy file="${doc.path}/developer/startup/startup-samplers.xml.html" 
        tofile="${dist.path}/doc/install.html" overwrite="yes" />
    <copy todir="${dist.path}/doc/images/">
      <fileset dir="${doc.path}/developer/startup/images" />
    </copy>

    <!-- Collect query documentation -->
    <copy file="${doc.path}/developer/query-lang/tolog-tutorial.xml.html" 
        tofile="${dist.path}/doc/query/tutorial.html" />
    <copy file="${doc.path}/developer/query-lang/predicate-reference.xml.html" 
        tofile="${dist.path}/doc/query/predicate-reference.html" />
    <!-- Collect schema documentation -->
    <copy file="${doc.path}/developer/schema-tools/schemaspec.xml.html" 
        tofile="${dist.path}/doc/schema/spec.html" />
    <copy file="${doc.path}/developer/schema-tools/schema-lang-tut.xml.html" 
        tofile="${dist.path}/doc/schema/tutorial.html" />
    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/query" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/query" />
    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/schema" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/schema" />

    <!-- Delete developer docs -->
    <delete dir="${dist.path}/doc/engine" />
    <delete file="${dist.path}/doc/navigator/tolog-taglib.html" />
    <delete file="${dist.path}/doc/navigator/taglib2.html" />
    <delete file="${dist.path}/doc/navigator/navguide.html" />
    <delete file="${dist.path}/doc/navigator/refcard.html" />
    <delete file="${dist.path}/doc/navigator/taglib2-overview-*.png" />

    <!-- Delete superfluous directories -->
    <delete dir="${dist.path}/lib" />
    <delete dir="${dist.path}/samples" />
    <delete dir="${dist.path}/tests" />

    <!-- Build installer -->
    <antcall target="dist.oks.samplers.installer" />

    <!-- Package it -->
    <exec dir="${build.dists}" executable="zip">
      <arg value="-r" />
      <arg value="${dist.name}-${dist.full.version}.zip" />
      <arg value="${dist.name}" />
    </exec>

  </target>

  <target name="dist.oks.omnigator.strip" depends="init">
    <!-- Delete not needed web apps -->
    <delete dir="${dist.path}/apache-tomcat/webapps/i18n" />
    <delete dir="${dist.path}/apache-tomcat/webapps/xmltools" />
  </target>

  <target name="dist.oks.omnigator.compile" depends="init">
    <!-- compile web application -->
    <antcall target="dist.oks.webapp.compile">
      <param name="dist.webapp" value="omnigator" />
    </antcall>

    <echo>delete (java and jsps) sources from the distribution</echo>
    <delete failonerror="false">
      <fileset dir="${dist.path}/apache-tomcat/webapps/omnigator" includes="**/*.jsp" />
      <fileset dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/classes" includes="**/*.java" />
      <fileset dir="${dist.path}/apache-tomcat/webapps/omnigator/models" includes="**/*" />
    </delete>
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/web_compiled.xml" />
    <delete dir="${dist.path}/apache-tomcat/webapps/omnigator/views" />
    <delete dir="${dist.path}/apache-tomcat/webapps/omnigator/fragments" />

    <!-- Use EncryptedModuleReader instead of plain for the samplers distribution -->
    <replace file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/config/application.xml" token="PlainModuleReader" value="EncryptedModuleReader" />

    <!-- Encrypt the module files -->
    <java classname="net.ontopia.topicmaps.cmdlineutils.ModuleEncrypter" fork="true" classpathref="project.class.path">
      <arg value="${dist.path}/apache-tomcat/webapps/omnigator/functions" />
    </java>
  </target>

  <!-- abstract target: do not call on its own -->
  <target name="dist.oks.samplers.war" depends="dist.oks.samplers">
    <property name="omnigator" value="${dist.path}/apache-tomcat/webapps/omnigator" />
    <war warfile="${dist.path}/omnigator.war" webxml="${omnigator}/WEB-INF/web.xml">
      <fileset dir="${omnigator}" />
      <!-- Due to a bug in Tomcat the TLDs are necessary, even 
           if they are not going to be used, because of the compiled JSPs -->
      <fileset dir="${src.path}/webapps/omnigator">
        <include name="WEB-INF/jsp/*.tld" />
      </fileset>
      <lib dir="${dist.path}/apache-tomcat/common/lib" />
    </war>
  </target>

  <!-- abstract target: do not call on it's own -->
  <target name="dist.oks.samplers.installer" depends="init">
    <copy file="${java.path}/dist/installer/install.xml" overwrite="true"
          todir="${build.dists}/installers" />
    <copy file="${java.path}/dist/installer/Licence.txt" overwrite="true"
          todir="${build.dists}/installers" />
    <copy file="${java.path}/dist/installer/startup.html" overwrite="true" 
          todir="${build.dists}/installers" />

    <!-- Insert current version number -->
    <replace file="${build.dists}/installers/install.xml" token="[version]" value="${dist.version}" />

    <!-- These commands are here because the packaging system skips
         empty directories. -->
    <mkdir dir="${build.dists}/oks-samplers/apache-tomcat/logs/" />
    <exec dir="${build.dists}/oks-samplers/apache-tomcat/logs/" executable="touch">
      <arg value="file.tmp" />
    </exec>
    <exec dir="${build.dists}/oks-samplers/apache-tomcat/webapps/omnigator/models/" executable="touch">
      <arg value="file.tmp" />
    </exec>

    <!-- Use the IzPack installer to create the distributable jar file -->
    <!-- Run the jar file directly rather than batch/shell scripts (compile) -->

    <delete quiet="true" failonerror="false" dir="${build.tmp}/izpack-src" />
    <unzip src="${3rdparty.path}/izpack-src.zip" dest="${build.tmp}/" />

    <!-- NOTES: 
         - built from CVS, but changed to source=1.3 in 
         $IZPACK_HOME/src/ant.properties and do ant clean + ant all -->

    <exec dir="${build.tmp}/izpack-src/bin" executable="${j2se14.home}/bin/java">
      <env key="JAVA_HOME" value="${j2se14.home}"/>
      <arg value="-jar" />
      <arg value="${build.tmp}/izpack-src/lib/compiler.jar" />
      <arg line="-HOME ${build.tmp}/izpack-src" />
      <arg line="${build.dists}/installers/install.xml" />
      <arg line="-b ${build.dists}/installers" />
      <arg line="-o ${build.dists}/installers/oks-samplers.jar" />
      <arg line="-k standard-kunststoff" />
    </exec>

  </target>

  <!-- - - - Build navigator components  - - - - - - - - - - - - - - - - - - -->
  <target name="dist.navigator.build">
    <echo>Building navigator components...</echo>

    <!-- Build jar file -->
    <antcall target="compile.navigator" />
    <antcall target="compile.test.navigator" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/userguide.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/navguide.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/config.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/plugins.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/tolog-taglib.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/taglib2.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/refcard.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/NAVIGATOR/userman.xml" />
    </antcall>

    <!-- Make sure taglib descriptors and velocity macros are up to date -->
    <antcall target="prepare.tlds" />

  </target>

  <!-- - - - Collect navigator runtime components  - - - - - - - - - - - - - -->

  <target name="dist.navigator.collect">
    <echo>Collecting navigator runtime components...</echo>

    <!-- Unpack jakarta tomcat -->
    <gunzip src="${3rdparty.path}/apache-tomcat55.tar.gz" dest="${3rdparty.path}/apache-tomcat55.tar" />
    <exec dir="${dist.path}" executable="tar">
      <arg value="xpf" />
      <arg value="${3rdparty.path}/apache-tomcat55.tar" />
    </exec>
    <delete quiet="true" file="${3rdparty.path}/apache-tomcat55.tar" />

    <!-- creating empty file in TOMCAT_HOME/temp -->
    <copy file="${java.path}/dist/tomcat/README.Ontopia" 
        todir="${dist.path}/apache-tomcat/" overwrite="yes" />
    <copy file="${dist.path}/apache-tomcat/README.Ontopia" 
        tofile="${dist.path}/apache-tomcat/temp/trash" overwrite="yes" />

    <!-- Copy Windows little startup icon [FIXME->dist/tomcat] -->
    <copy file="${3rdparty.path}/startup.pif" todir="${dist.path}/apache-tomcat/bin" />

    <!-- Replace server.xml -->
    <copy file="${java.path}/dist/tomcat/tomcat55/server-triper.xml" 
        tofile="${dist.path}/apache-tomcat/conf/server.xml" overwrite="yes" />

    <!-- Copy tomcat log4j configuration -->
    <copy file="${java.path}/dist/tomcat/tomcat55/log4j.properties" 
        tofile="${dist.path}/apache-tomcat/common/classes/log4j.properties" overwrite="yes" />

    <!-- Copy startup scripts -->
    <copy file="${java.path}/dist/tomcat/tomcat55/setclasspath.bat" 
        tofile="${dist.path}/apache-tomcat/bin/setclasspath.bat" overwrite="yes" />
    <copy file="${java.path}/dist/tomcat/tomcat55/catalina.bat" 
        tofile="${dist.path}/apache-tomcat/bin/catalina.bat" overwrite="yes" />
    <copy file="${java.path}/dist/tomcat/tomcat55/catalina.sh" 
        tofile="${dist.path}/apache-tomcat/bin/catalina.sh" overwrite="yes" />

    <!-- Fix permissions -->
    <chmod dir="${dist.path}/apache-tomcat/bin" perm="a+rx" includes="*.sh" />

    <!-- Delete web applications -->
    <delete quiet="true" dir="${dist.path}/apache-tomcat/server/webapps/manager" />
    <delete quiet="true" file="${dist.path}/apache-tomcat/conf/Catalina/localhost/manager.xml" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/webdav" />

    <!-- Build OKS realm -->
    <antcall target="jar.topicmaprealm"/>
    <copy file="${build.jars}/oks-realm.jar" 
        tofile="${dist.path}/apache-tomcat/server/lib/oks-realm.jar" overwrite="yes" />

    <!-- Copy JAAS config file -->
    <copy file="${java.path}/dist/tomcat/tomcat55/jaas.config" 
        tofile="${dist.path}/apache-tomcat/conf/jaas.config" overwrite="yes" />

    <!-- Replace xerces with crimson -->
    <delete quiet="true" file="${dist.path}/apache-tomcat/common/lib/xerces.jar" />
    <copy file="${3rdparty.path}/jaxp.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/crimson.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Libraries used by all web applications -->
    <copy file="${3rdparty.path}/getopt.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/log4j.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/antlr.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/jing.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/jena.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/jakarta-oro.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/icu4j.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/xerces.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/trove.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/retrotranslator-runtime.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/backport-util-concurrent.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/acmeenc.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/commons-collections.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/commons-logging.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/jaas.jar" todir="${dist.path}/apache-tomcat/server/lib" />

    <!-- Copy JSTL tag libraries -->
    <copy file="${3rdparty.path}/jstl.jar" todir="${dist.path}/apache-tomcat/common/lib" overwrite="yes" />
    <copy file="${3rdparty.path}/standard.jar" todir="${dist.path}/apache-tomcat/common/lib" overwrite="yes" />

    <!-- Collect omnigator web application -->
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator">
      <fileset dir="${src.path}/webapps/omnigator" />
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/work" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/classes" />
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/lib" />
    <move file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/config/tm-sources.xml" 
        tofile="${dist.path}/apache-tomcat/common/classes/tm-sources.xml"/>
    <!-- Delete JSP example directory -->
    <delete dir="${dist.path}/apache-tomcat/webapps/omnigator/framework-examples" />

    <!-- Clear the plugins directory -->
    <delete dir="${dist.path}/apache-tomcat/webapps/omnigator/plugins" />
    <!-- Copy plugins -->
    <mkdir dir="${dist.path}/apache-tomcat/webapps/omnigator/plugins" />
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins">
      <fileset dir="${src.path}/webapps/omnigator/plugins">
        <include name="tmlink/*/**" />
        <include name="customise/*/**" />
        <include name="feedback/*/**" />
        <include name="edit/*/**" />
        <include name="export/*/**" />
        <include name="filter/*/**" />
        <include name="hello/*/**" />
        <include name="ltm/*/**" />
        <include name="manage/*/**" />
        <include name="merge/*/**" />
        <include name="plugins/*/**" />
        <include name="samples/*/**" />
        <include name="statistics/*/**" />
        <include name="rdf2tm/*/**" />
        <include name="tmrap/*/**" />
      </fileset>
    </copy>

    <!-- Collect omnigator documentation -->
    <copy file="${doc.path}/developer/NAVIGATOR/config.xml.html" tofile="${dist.path}/doc/navigator/config.html" />
    <copy file="${doc.path}/developer/NAVIGATOR/plugins.xml.html" tofile="${dist.path}/doc/navigator/plugins.html" />
    <copy file="${doc.path}/developer/NAVIGATOR/tolog-taglib.xml.html" tofile="${dist.path}/doc/navigator/tolog-taglib.html" />
    <copy file="${doc.path}/developer/NAVIGATOR/taglib2.xml.html" tofile="${dist.path}/doc/navigator/taglib2.html" />
    <copy file="${doc.path}/developer/NAVIGATOR/refcard.xml.html" tofile="${dist.path}/doc/navigator/refcard.html" />
    <copy file="${doc.path}/developer/NAVIGATOR/navguide.xml.html" tofile="${dist.path}/doc/navigator/navguide.html" />
    <copy todir="${dist.path}/doc/navigator">
      <fileset dir="${doc.path}/developer/NAVIGATOR">
        <patternset>
          <include name="*.png" />
        </patternset>
        <patternset>
          <include name="*.gif" />
        </patternset>
      </fileset>
    </copy>

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/navigator" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/navigator" />

    <!-- Copy the user guide to the web application -->
    <mkdir dir="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator" />
    <copy file="${doc.path}/developer/NAVIGATOR/userguide.xml.html" 
        tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator/userguide.html" />
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator/graphics">
      <fileset dir="${doc.path}/developer/NAVIGATOR/graphics" />
    </copy>
    <copy file="${doc.path}/developer/NAVIGATOR/plugins.xml.html" 
        tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator/plugins.html" />
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator">
      <fileset dir="${doc.path}/developer/NAVIGATOR">
        <patternset>
          <include name="*.png" />
        </patternset>
        <patternset>
          <include name="*.gif" />
        </patternset>
      </fileset>
    </copy>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator" />

    <!-- Collect query documentation -->
    <copy file="${doc.path}/developer/query-lang/tolog-tutorial.xml.html" tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/query/tutorial.html" />
    <copy file="${doc.path}/developer/query-lang/predicate-reference.xml.html" tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/query/predicate-reference.html" />
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/query" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/query" />

    <!-- Collect schema documentation -->
    <copy file="${doc.path}/developer/schema-tools/schemaspec.xml.html" tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/schema/spec.html" />
    <copy file="${doc.path}/developer/schema-tools/schema-lang-tut.xml.html" tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/schema/tutorial.html" />
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/schema" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/schema" />

    <!-- Copy example topic maps to the web application documentation dir -->
    <copy file="${topicmaps.path}/opera/opera.ltm" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/navigator" />
    <copy file="${topicmaps.path}/i18n/i18n.ltm" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs" />
    <copy file="${topicmaps.path}/ONTOPIA/jill.xtm" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs" />

    <!-- Replace topic map files which will be used by omnigator -->
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps" />
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps">
      <fileset dir="${dist.path}/samples" />
    </copy>
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps" overwrite="true">
      <fileset dir="${topicmaps.path}/ted">
        <patternset>
          <include name="*.xtm" />
        </patternset>
      </fileset>
    </copy>
    <delete file="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/tasks.ltm" />
    <move todir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/schemas">
      <fileset dir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps">
        <include name="*.osl" />
      </fileset>
    </move>

    <!-- mondial.xtm  -->
    <gunzip src="${topicmaps.path}/autogen/mondial.xtm.gz" dest="${topicmaps.path}/autogen/mondial.xtm" />
    <copy file="${topicmaps.path}/autogen/mondial.xtm" todir="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps" overwrite="yes" />

    <!-- Insert Versionnumber and Builddate for display into omnigator -->
    <replace file="${dist.path}/apache-tomcat/webapps/omnigator/fragments/tagline-header.jsp" token="@VERSION@" value="${dist.version}" />
    <replace file="${dist.path}/apache-tomcat/webapps/omnigator/fragments/tagline-header.jsp" token="@DATE@" value="${build.date}" />

    <!-- Add i18n web application -->
    <antcall target="dist.oks.webapp.i18n" />

    <!-- Add xmltools web application -->
    <antcall target="dist.oks.webapp.xmltools" />

    <!-- Add manage web application -->
    <antcall target="dist.oks.webapp.manage" />

    <!-- Add ontopoly web application -->
    <antcall target="dist.oks.webapp.ontopoly" />
    <antcall target="dist.oks.webapp.ontopoly0" />

  </target>

  <target name="dist.navigator.test.collect">

    <!-- Navigator test files and configuration -->
    <copy todir="${dist.path}/tests/test-data/nav2">
      <fileset dir="${java.path}/test-data/nav2" />
    </copy>

    <copy todir="${dist.path}/tests/test-data/ontopoly">
      <fileset dir="${java.path}/test-data/ontopoly" />
    </copy>

  </target>

  <!-- - - - Build fulltext components  - - - - - - - - - - - - - - - - - - -->
  <target name="dist.fulltext.build">

    <!-- Build jar files -->
    <antcall target="compile.fulltext" />
    <antcall target="compile.test.fulltext" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/fulltext/fulltext-api.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/fulltext/fulltext-faq.xml" />
    </antcall>

  </target>

  <!-- - - - Collect fulltext components - - - - - - - - - - - - - - - - - - -->
  <target name="dist.fulltext.collect">

    <!-- Collect jar files -->
    <copy file="${3rdparty.path}/lucene.jar" todir="${dist.path}/lib" />
    <copy file="${3rdparty.path}/concurrent.jar" todir="${dist.path}/lib" />

    <!-- Collect jar files for the navigator -->
    <copy file="${dist.path}/lib/lucene.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${dist.path}/lib/concurrent.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Collect documentation -->
    <copy file="${doc.path}/developer/fulltext/fulltext-api.xml.html" tofile="${dist.path}/doc/fulltext/devguide.html" />
    <copy file="${doc.path}/developer/fulltext/SampleIndexer.java" todir="${dist.path}/doc/fulltext" />
    <copy file="${doc.path}/developer/fulltext/SampleSearcher.java" todir="${dist.path}/doc/fulltext" />
    <copy file="${doc.path}/developer/fulltext/fulltext-faq.xml.html" tofile="${dist.path}/doc/fulltext/faq.html" />
  
    <!-- Compile code examples -->
    <javac srcdir="${doc.path}/developer/fulltext" 
          destdir="${doc.path}/developer/fulltext" optimize="${optimize}" 
          deprecation="${deprecation}" debug="${debug}" 
          debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="*.java" />
      </patternset>
    </javac>

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/fulltext" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/fulltext" />

    <!-- Copy plugin-->
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins">
      <fileset dir="${src.path}/webapps/omnigator/plugins">
        <include name="fulltext/*/**" />
        <include name="ftadmin/*/**" />
      </fileset>
    </copy>

  </target>

  <target name="dist.fulltext.test.collect">

  </target>

  <!-- - - - Build db2tm. components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.db2tm.build">

    <!-- Build jar files -->
    <antcall target="compile.db2tm" />
    <antcall target="compile.test.db2tm" />

  </target>

  <!-- - - - Collect db2tm components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.db2tm.collect">

    <!-- copy jar files -->
    <copy file="${3rdparty.path}/opencsv.jar" todir="${dist.path}/lib" />
    <copy file="${dist.path}/lib/opencsv.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- build and copy documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/db2tm/user-guide.xml" />
    </antcall>
    <copy file="${doc.path}/developer/db2tm/user-guide.xml.html" 
         tofile="${dist.path}/doc/db2tm/user-guide.html" />
    <copy file="${java.path}/net/ontopia/topicmaps/db2tm/db2tm.rnc" 
         tofile="${dist.path}/doc/db2tm/db2tm.rnc" />

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/db2tm" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/db2tm" />

  </target>

  <target name="dist.db2tm.test.collect">

  </target>

  <!-- - - - Build tmrap components  - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.tmrap.build">

    <!-- Build jar files -->
    <!--antcall target="compile.tmrap" /-->
    <!--antcall target="compile.test.tmrap" /-->

    <!-- build and copy documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/tmrap/dev-guide.xml" />
    </antcall>
    <copy file="${doc.path}/developer/tmrap/dev-guide.xml.html" 
         tofile="${dist.path}/doc/tmrap/dev-guide.html" />

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/tmrap" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/tmrap" />

  </target>

  <!-- - - - Collect tmrap components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.tmrap.collect">

    <unzip src="${src.path}/webapps/tmrap/axis2/tmrap.zip" 
          dest="${dist.path}/apache-tomcat/webapps/" />

  </target>

  <target name="dist.tmrap.test.collect">

  </target>

  <!-- - - - Collect classify runtime components - - - - - - - - - - - - - - -->

  <target name="dist.classify.collect">
    <echo>Collecting classify components...</echo>

    <!-- Ontopoly plug-in -->
    <copy todir="${dist.path}/apache-tomcat/webapps/ontopoly0">
      <fileset dir="${src.path}/webapps/ted">
        <include name="plugins/classify/*/**" />
      </fileset>
    </copy>

    <!-- Libraries used by classify plug-in -->
    <copy file="${3rdparty.path}/snowball.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/poi.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/poi-scratchpad.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/pdfbox.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/fontbox.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/tagsoup.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/opencsv.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <antcall target="clean.classify"/>
    <antcall target="compile.test.classify"/>
    <antcall target="jar.classify"/>
    <copy file="${java.path}/build/jars/ontopia-classify.jar" todir="${dist.path}/apache-tomcat/common/lib" />

  </target>

  <!-- - - - Build rdbms components - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.rdbms.build">

    <!-- Build jar files -->
    <antcall target="compile.rdbms" />
    <antcall target="compile.test.rdbms" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/rdbms/rdbms-install.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/rdbms/rdbms-guide.xml" />
    </antcall>
  
    <!-- Compile code examples -->
    <javac srcdir="${doc.path}/developer/rdbms" 
          destdir="${doc.path}/developer/rdbms" optimize="${optimize}" 
          deprecation="${deprecation}" debug="${debug}" 
          debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="*.java" />
      </patternset>
    </javac>

    <!-- Generate database scripts -->
    <mkdir dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/schema/setup" />
    <exec dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/schema/" executable="sh">
      <env key="CLASSPATH" path="${build.classes}:${3rdparty.path}/getopt.jar:${3rdparty.path}/crimson.jar"/>
      <arg value="${src.path}/scripts/rdbms-schema.sh" />
    </exec>

  </target>

  <!-- - - - Collect rdbms components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.rdbms.collect">

    <!-- Collect jar files -->
    <copy file="${3rdparty.path}/commons-pool.jar" todir="${dist.path}/lib" />
    <copy file="${3rdparty.path}/commons-dbcp.jar" todir="${dist.path}/lib" />
    <copy file="${3rdparty.path}/jgroups-all.jar" todir="${dist.path}/lib" />

    <!-- Collect jar files for the navigator -->
    <copy file="${dist.path}/lib/commons-pool.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${dist.path}/lib/commons-dbcp.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${dist.path}/lib/jgroups-all.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Collect documentation -->
    <mkdir dir="${dist.path}/doc/rdbms" />
    <copy file="${doc.path}/developer/rdbms/rdbms-install.xml.html" tofile="${dist.path}/doc/rdbms/install.html" />
    <copy file="${doc.path}/developer/rdbms/rdbms-guide.xml.html" tofile="${dist.path}/doc/rdbms/devguide.html" />

    <copy file="${doc.path}/developer/rdbms/RdbmsImport.java" todir="${dist.path}/doc/rdbms" />
    <copy file="${doc.path}/developer/rdbms/RdbmsExport.java" todir="${dist.path}/doc/rdbms" />
    <copy file="${doc.path}/developer/rdbms/RdbmsList.java" todir="${dist.path}/doc/rdbms" />

    <!--copy todir="${dist.path}/doc/rdbms/schema">
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/schema/druid/db-html" />
    </copy-->

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/rdbms" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/rdbms" />

    <!-- Collect database scripts -->
    <mkdir dir="${dist.path}/rdbms/setup" />
    <copy todir="${dist.path}/rdbms/setup">
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/schema/setup" includes="*.sql" />
    </copy>
    <!-- Collect sample database property -->
    <mkdir dir="${dist.path}/rdbms/config" />
    <copy todir="${dist.path}/rdbms/config">
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.oracle8.props" />
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.oracle9i.props" />
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.oracle10g.props" />
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.postgresql.props" />
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.sqlserver.props" />
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.mysql.props" />
      <fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.h2.props" />
      <!--fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.firebird.props" /-->
      <!--fileset dir="${java.path}/net/ontopia/topicmaps/impl/rdbms/config" includes="db.sapdb.props" /-->
    </copy>

    <!-- Collection clustering configuration -->
    <mkdir dir="${dist.path}/rdbms/clustering" />
    <copy file="${java.path}/net/ontopia/topicmaps/impl/rdbms/config/oks-terracotta.xml" todir="${dist.path}/rdbms/clustering" />

  </target>

  <target name="dist.rdbms.test.collect">

  </target>

  <!-- - - - Index file - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="dist.index.html">
    <copy file="${build.tmp}/${index.file}" overwrite="yes" tofile="${dist.path}/index.html" />
    <replace file="${dist.path}/index.html" token="@[ProductName]" value="${index.product}" />
  </target>

  <!-- - - - Generate TLD files for JSP 1.1 containers  - - - - - - - - - - -->

  <target name="dist.tld.1.1">
    <mkdir dir="${dist.path}/config/jsp-11" />

    <!-- Compile and package JSP interface stubs -->
    <javac srcdir="${java.path}" optimize="${optimize}" deprecation="${deprecation}" 
           debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="javax/servlet/**/*.java" />
      </patternset>
    </javac>

    <jar basedir="${java.path}" jarfile="${dist.path}/config/jsp-11/jsp12-compat.jar">
      <patternset>
        <include name="javax/servlet/**/*.class" />
      </patternset>
    </jar>

    <!-- Generate TLD files -->
    <exec executable="python">
      <arg value="${java.path}/dist/scripts/tld-downgrade.py" />
      <arg value="${src.path}/webapps/webedtest/WEB-INF/jsp" />
      <arg value="${dist.path}/config/jsp-11" />
    </exec>
  </target>

  <!-- - - - Update product class - - - - - - - - - - - - - - - - - - - - - -->

  <target name="prepare.product.class">
    <!-- Bump build numbers and update product version information -->
    <exec dir="${src.path}" executable="python">
      <arg value="scripts/newbuild.py" />
      <arg value="update(${oks.version}, {})" />
      <!-- product information dictionary -->
      <arg value="java/net/ontopia/Ontopia.java" />
    </exec>
  </target>

  <!-- - - - Build schema components - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.schema.build">

    <!-- Build jar files -->
    <antcall target="compile.schema" />
    <antcall target="compile.test.schema" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/schema-tools/schemaspec.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/schema-tools/schema-lang-tut.xml" />
    </antcall>
  </target>

  <target name="make.schema.doc" depends="init">
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/schema-tools/schemaspec.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/schema-tools/schema-lang-tut.xml" />
    </antcall>
  </target>

  <!-- - - - Collect schema components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.schema.collect">

    <!-- Collect documentation -->
    <mkdir dir="${dist.path}/doc/schema" />
    <copy file="${doc.path}/developer/schema-tools/schemaspec.xml.html" tofile="${dist.path}/doc/schema/spec.html" />
    <copy file="${doc.path}/developer/schema-tools/schema-lang-tut.xml.html" tofile="${dist.path}/doc/schema/tutorial.html" />
    <copy file="${doc.path}/developer/schema-tools/schema.dtd" todir="${dist.path}/doc/schema" />

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/schema" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/schema" />

    <!-- Copy samples -->
    <copy todir="${dist.path}/doc/schema">
      <fileset dir="${doc.path}/developer/schema-tools">
        <include name="*.java" />
      </fileset>
    </copy>

    <!-- Copy plugin -->
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins">
      <fileset dir="${src.path}/webapps/omnigator/plugins">
        <include name="validator/*/**" />
      </fileset>
    </copy>

  </target>

  <target name="dist.schema.test.collect">

    <!-- Test data -->
    <copy todir="${dist.path}/tests/test-data/schema">
      <fileset dir="${java.path}/test-data/schema" />
    </copy>

  </target>

  <!-- - - - Build query components - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.query.build">

    <!-- Build jar files -->
    <antcall target="compile.query" />
    <antcall target="compile.test.query" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/query-lang/tolog-tutorial.xml" />
    </antcall>
    <!--antcall target="makehtml"><param name="file" value="${doc.path}/developer/query-lang/qlspec.xml"/></antcall-->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/query-lang/predicate-reference.xml" />
    </antcall>

  </target>

  <!-- - - - Collect query components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.query.collect">

    <!-- Collect documentation -->
    <copy file="${doc.path}/developer/query-lang/tolog-tutorial.xml.html" 
        tofile="${dist.path}/doc/query/tutorial.html" />
    <copy file="${doc.path}/developer/query-lang/predicate-reference.xml.html" 
        tofile="${dist.path}/doc/query/predicate-reference.html" />

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/query" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/query" />

    <!-- Copy plugin -->
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins">
      <fileset dir="${src.path}/webapps/omnigator/plugins">
        <include name="tolog/*/**" />
      </fileset>
    </copy>

  </target>

  <target name="dist.query.test.collect">

    <!-- Test data -->
    <copy todir="${dist.path}/tests/test-data/query">
      <fileset dir="${java.path}/test-data/query" />
    </copy>

  </target>

  <!-- - - - Build webed components - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.webed.build">

    <!-- Build jar files -->
    <antcall target="compile.webed" />
    <antcall target="compile.test.webed" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/webeditor/action-ref.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/webeditor/devguide.xml" />
    </antcall>
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/webeditor/taglib.xml" />
    </antcall>

  </target>

  <!-- - - - Collect webed components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.webed.collect">

    <!-- Collect jar files -->
    <copy file="${3rdparty.path}/velocity.jar" todir="${dist.path}/lib" />
    <copy file="${3rdparty.path}/commons-fileupload.jar" todir="${dist.path}/lib" />

    <!-- Collect jar files for the navigator -->
    <copy file="${3rdparty.path}/velocity.jar" todir="${dist.path}/apache-tomcat/common/lib" />
    <copy file="${3rdparty.path}/commons-fileupload.jar" todir="${dist.path}/apache-tomcat/common/lib" />

    <!-- Collect documentation -->
    <mkdir dir="${dist.path}/doc/webed" />
    <copy file="${doc.path}/developer/webeditor/action-ref.xml.html" tofile="${dist.path}/doc/webed/action-ref.html" />
    <copy file="${doc.path}/developer/webeditor/devguide.xml.html" tofile="${dist.path}/doc/webed/devguide.html" />
    <copy file="${doc.path}/developer/webeditor/taglib.xml.html" tofile="${dist.path}/doc/webed/taglib.html" />
    <copy file="${src.path}/webapps/webedtest/WEB-INF/config/actionConfig.dtd" tofile="${dist.path}/doc/webed/actionConfig.dtd" />
    <copy file="${src.path}/webapps/webedtest/WEB-INF/config/actionConfig.rnc" tofile="${dist.path}/doc/webed/actionConfig.rnc" />

    <copy todir="${dist.path}/doc/webed">
      <fileset dir="${doc.path}/developer/webeditor">
        <patternset>
          <include name="*.gif" />
        </patternset>
        <patternset>
          <include name="*.png" />
        </patternset>
      </fileset>
    </copy>

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/doc/webed" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/doc/webed" />

  </target>

  <target name="dist.webed.test.collect">

    <!-- Test data -->
    <copy todir="${dist.path}/tests/test-data/webed">
      <fileset dir="${java.path}/test-data/webed" />
    </copy>

  </target>

  <!-- - - - Build viz components - - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.viz.build">

    <!-- Build jar files -->
    <antcall target="jar.vizlet" />

    <!-- Generate documentation -->
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/vizzigator/viz_userguide.xml" />
    </antcall>

    <!-- Validate properties files -->
    <exec dir="${java.path}" executable="jython">
      <arg value="${java.path}/dist/scripts/check-properties.py" />
      <arg value="${java.path}/net/ontopia/topicmaps/viz" />
    </exec>

  </target>

  <!-- - - - Collect viz components  - - - - - - - - - - - - - - - - - - - -->
  <target name="dist.viz.collect">

    <!-- Collect jar files -->
    <copy file="${3rdparty.path}/touchgraph.jar" todir="${dist.path}/lib" />

    <!-- Collect documentation -->
    <mkdir dir="${dist.path}/apache-tomcat/webapps/omnigator/docs/vizigator" />
    <copy file="${doc.path}/developer/vizzigator/viz_userguide.xml.html" 
      tofile="${dist.path}/apache-tomcat/webapps/omnigator/docs/vizigator/userguide.html" />

    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/vizigator">
      <fileset dir="${doc.path}/developer/vizzigator">
        <patternset>
          <include name="*.gif" />
        </patternset>
        <patternset>
          <include name="*.png" />
        </patternset>
      </fileset>
    </copy>

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/vizigator" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${dist.path}/apache-tomcat/webapps/omnigator/docs/vizigator" />

    <!-- Copy plugin -->
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins">
      <fileset dir="${src.path}/webapps/omnigator/plugins">
        <include name="viz/*/**" />
      </fileset>
    </copy>
    <copy todir="${dist.path}/apache-tomcat/webapps/omnigator/plugins/viz" 
           file="${build.jars}/ontopia-vizlet.jar" overwrite="yes" />

    <!-- Copy jar-files -->
    <copy file="${build.jars}/ontopia-vizlet.jar" 
        tofile="${dist.path}/extras/ontopia-vizlet.jar" />
    <copy file="${build.jars}/signed-vizlet.jar" 
        tofile="${dist.path}/extras/signed-vizlet.jar" />

    <!-- VizPlugin configurations -->
    <property name="vizcfg" value="${dist.path}/apache-tomcat/webapps/omnigator/WEB-INF/topicmaps/" />
    <copy file="${topicmaps.path}/i18n/i18n.ltm.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/autogen/mondial.xtm.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/autogen/tm-standards.xtm.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/opera/opera.ltm.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/xmltools/xmltools-tm.xtm.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/3rdparty/music/KanzakisConcerts.rdf.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/3rdparty/pokemon.ltm.viz" todir="${vizcfg}" />
    <copy file="${topicmaps.path}/ONTOPIA/support-kb.ltm.viz" todir="${vizcfg}" />

  </target>

  <target name="dist.viz.test.collect">
  </target>

  <!-- - - - Ontopoly web application  - - - - - - - - - - - - - - - - - - -->
  <target name="dist.oks.webapp.ontopoly" depends="init">
    <exec dir="${src.path}/webapps/ontopoly" executable="mvn">
      <env key="JAVA_HOME" value="${j2se15.home}"/>
      <arg value="-Dmaven.test.skip=true" />
      <arg value="clean" />
      <arg value="package" />
    </exec>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/ontopoly" />
    <copy file="${src.path}/webapps/ontopoly/target/ontopoly_war-${dist.version.major}.${dist.version.minor}-SNAPSHOT.war" 
         tofile="${dist.path}/apache-tomcat/webapps/ontopoly.war" />
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/generic-editor/user-guide.xml" />
    </antcall>
  </target>

  <target name="dist.oks.webapp.ontopoly.docs" depends="init">
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/generic-editor/user-guide.xml" />
    </antcall>
    <property name="ontopoly.path" value="${src.path}/webapps/ontopoly/src/main/webapp" />
    <mkdir dir="${ontopoly.path}/doc/" />
    <copy file="${doc.path}/developer/generic-editor/user-guide.xml.html" 
         tofile="${ontopoly.path}/doc/user-guide.html" />
    <copy file="${3rdparty.path}/images/logo.gif" 
         todir="${ontopoly.path}/doc/" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" 
         todir="${ontopoly.path}/doc/" />
    <copy todir="${ontopoly.path}/doc/pages/">
      <fileset dir="${doc.path}/developer/generic-editor/pages" />
    </copy>
  </target>

  <target name="dist.oks.webapp.ontopoly0">
    <echo>Copying Ontopoly web application...</echo>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/ontopoly0" />
    <copy todir="${dist.path}/apache-tomcat/webapps/ontopoly0">
      <fileset dir="${src.path}/webapps/ted">
        <exclude name="plugins/*/**" />
      </fileset>
    </copy>
    <copy todir="${dist.path}/apache-tomcat/webapps/ontopoly0">
      <fileset dir="${src.path}/webapps/ted">
        <include name="plugins/oksmenu/*/**" />
        <include name="plugins/omnigate/*/**" />
        <include name="plugins/vizigate/*/**" />
      </fileset>
    </copy>
    <delete quiet="true" dir="${dist.path}/apache-tomcat/webapps/ontopoly0/META-INF" />
    <antcall target="makehtml">
      <param name="file" value="${doc.path}/developer/generic-editor/user-guide.xml" />
    </antcall>
    <copy file="${doc.path}/developer/generic-editor/user-guide.xml.html" 
         tofile="${dist.path}/apache-tomcat/webapps/ontopoly0/doc/user-guide.html" />
    <copy file="${3rdparty.path}/images/logo.gif" 
         todir="${dist.path}/apache-tomcat/webapps/ontopoly0/doc/" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" 
         todir="${dist.path}/apache-tomcat/webapps/ontopoly0/doc/" />

    <copy todir="${dist.path}/apache-tomcat/webapps/ontopoly0/doc/pages/">
      <fileset dir="${doc.path}/developer/generic-editor/pages" />
    </copy>
  </target>

  <patternset id="sources.webapp.ontopoly">
    <include name="net/ontopia/topicmaps/nav2/webapps/ted/**/*.java"/>
  </patternset>

  <patternset id="classes.webapp.ontopoly">
    <include name="net/ontopia/topicmaps/nav2/webapps/ted/**/*.class"/>
  </patternset>

  <target name="compile.webapp.ontopoly" depends="init">
    <echo>Compiling Ontopoly web application classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" 
           deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}"
           classpathref="project.class.path" source="1.3">
      <patternset refid="sources.webapp.ontopoly"/>
    </javac>
  </target>

  <target name="dist.oks.webapp.root.samplers" depends="init">
    <antcall target="dist.oks.webapp.root" />
    <copy file="${src.path}/webapps/freedownload/oks-samplers-header.gif" overwrite="yes" 
        tofile="${dist.path}/apache-tomcat/webapps/ROOT/new_header.gif" />
  </target>

  <target name="dist.oks.webapp.root" depends="init">
     
    <echo>Generating ROOT index page...</echo>
    <copy file="${src.path}/webapps/freedownload/index-template.vm" overwrite="yes" 
        tofile="${build.tmp}/freedownload-index-template.vm" />
    <copy file="${src.path}/webapps/freedownload/control.vm" overwrite="yes" 
        tofile="${build.tmp}/freedownload-control.vm" />
    <texen controlTemplate="freedownload-control.vm" outputDirectory="${build.tmp}" 
           templatePath="${build.tmp}" outputFile="generation.report" />

    <echo>Replacing ROOT web application...</echo>
    <delete dir="${dist.path}/apache-tomcat/webapps/ROOT" />
    <copy todir="${dist.path}/apache-tomcat/webapps/ROOT">
      <fileset dir="${src.path}/webapps/freedownload" />
    </copy>
    <delete file="${dist.path}/apache-tomcat/webapps/ROOT/control.vm" />
    <delete file="${dist.path}/apache-tomcat/webapps/ROOT/index-template.vm" />
    <copy file="${build.tmp}/freedownload-index-${dist.shortname}.html" overwrite="yes" 
        tofile="${dist.path}/apache-tomcat/webapps/ROOT/index.html" />
    <copy file="${dist.path}/apache-tomcat/webapps/ROOT/oks-header.gif" overwrite="yes" 
        tofile="${dist.path}/apache-tomcat/webapps/ROOT/new_header.gif" />
  </target>

  <target name="dist.oks.ontopoly.compile" depends="init">
    <!-- compile web application -->
    <antcall target="dist.oks.webapp.compile">
      <param name="dist.webapp" value="ontopoly0" />
    </antcall>

    <echo>delete (java and jsps) Sources from the distribution</echo>
    <delete failonerror="false">
      <fileset dir="${dist.path}/apache-tomcat/webapps/ontopoly0" includes="**/*.jsp" />
      <fileset dir="${dist.path}/apache-tomcat/webapps/ontopoly0/WEB-INF/classes" includes="**/*.java" />
      <fileset dir="${dist.path}/apache-tomcat/webapps/ontopoly0/WEB-INF/jsp" includes="**/*.tld" />
    </delete>
    <delete file="${dist.path}/apache-tomcat/webapps/ontopoly0/WEB-INF/web_compiled.xml" />
    
  </target>

  <target name="dist.oks.accessctl.compile" depends="init">
    <!-- compile web application -->
    <antcall target="dist.oks.webapp.compile">
      <param name="dist.webapp" value="accessctl" />
    </antcall>

    <echo>delete (java and jsps) Sources from the distribution</echo>
    <delete failonerror="false">
      <fileset dir="${dist.path}/apache-tomcat/webapps/accessctl" includes="**/*.jsp" />
      <fileset dir="${dist.path}/apache-tomcat/webapps/accessctl/WEB-INF/classes" includes="**/*.java" />
      <fileset dir="${dist.path}/apache-tomcat/webapps/accessctl/WEB-INF/jsp" includes="**/*.tld" />
    </delete>
    <delete file="${dist.path}/apache-tomcat/webapps/accessctl/WEB-INF/web_compiled.xml" />
  </target>

  <target name="dist.oks.webapp.compile" depends="init">
    <echo>Compiling ${dist.webapp} web application...</echo>

    <echo>Generate source code from jsp pages</echo>
    <mkdir dir="${dist.path}/apache-tomcat/webapps/${dist.webapp}/WEB-INF/classes" />

    <java classname="org.apache.jasper.JspC" dir="${dist.path}/apache-tomcat" 
          failonerror="yes" classpathref="jasper.class.path"
          fork="true" jvm="${j2se14.home}/bin/java">
      <arg line="-v" />
      <arg line="-d webapps/${dist.webapp}/WEB-INF/classes" />
      <arg line="-p net.ontopia.jsp" />
      <arg line="-die" />
      <arg line="-webinc webapps/${dist.webapp}/WEB-INF/web_compiled.xml" />
      <arg line="-webapp webapps/${dist.webapp}" />
    </java>

    <echo>Compile ${dist.webapp} jsp source code</echo>
    <javac srcdir="${dist.path}/apache-tomcat/webapps/${dist.webapp}/WEB-INF/classes" 
         optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" 
         debuglevel="${debuglevel}" classpathref="jasper.class.path" source="1.3"
         fork="true" executable="${j2se14.home}/bin/javac"/>

    <echo>insert autogenerated web.xml fragment</echo>
    <exec dir="${java.path}" executable="python">
      <arg value="${java.path}/dist/scripts/template.py" />
      <arg value="{'WEB_COMPILED': '--&gt;' + open('${dist.path}/apache-tomcat/webapps/${dist.webapp}/WEB-INF/web_compiled.xml').read() + '&lt;!--'}" />
      <arg value="${dist.path}/apache-tomcat/webapps/${dist.webapp}/WEB-INF/web.xml" />
      <arg value="${dist.path}/apache-tomcat/webapps/${dist.webapp}/WEB-INF/web.xml" />
    </exec>
  </target>

  <target name="dist.ontopoly.embedded" depends="init">
    <property name="pages_dir" value="WEB-INF/ontopoly-pages" />
    <property name="web_dir" value="/ontopoly" />
    <mkdir dir="${build.root}/ontopoly" />
    <copy todir="${build.root}/ontopoly" overwrite="yes">
      <fileset dir="${src.path}/webapps/ted/">
        <include name="**/*" />
      </fileset>
    </copy>
    <mkdir dir="${build.root}/ontopoly/embedded" />
    <copy todir="${build.root}/ontopoly/embedded/" overwrite="yes">
      <fileset dir="${build.root}/ontopoly/">
        <include name="images/**/*" />
        <include name="styles/**/*" />
        <include name="doc/**/*" />
        <include name="javascript/**/*" />
      </fileset>
    </copy>
    <zip destfile="${build.dists}/ontopoly-embedded.zip">
      <fileset dir="${build.root}/ontopoly"/>
    </zip>
  </target>

  <!-- ================================================
        LTM parser
     ================================================ -->

  <target name="compile.ltm" depends="init">
    <antlr target="${java.path}/net/ontopia/topicmaps/utils/ltm/ltm.g" />
  </target>

  <!-- ================================================
        CTM parser
     ================================================ -->
 
  <taskdef classname="JFlex.anttask.JFlexTask" name="jflex">
    <classpath refid="project.class.path"/>
  </taskdef>

  <target name="compile.ctm" depends="init">
    <jflex file="${java.path}/net/ontopia/topicmaps/utils/ctm/ctm.flex"
           destdir="${java.path}"/>
    <antlr target="${java.path}/net/ontopia/topicmaps/utils/ctm/ctm.g" />
  </target>
  
  <!-- ================================================
        JDO Query parser
     ================================================ -->

  <target name="compile.jdoquery.parser" depends="init">
    <antlr target="${java.path}/net/ontopia/persistence/query/parser/jdoquery.g" />
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="net/ontopia/persistence/query/parser/*.java" />
      </patternset>
    </javac>
  </target>

  <target name="compile.jdoquery" depends="init">
    <!-- Note:also included in the pattern classes.rdbms -->
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="net/ontopia/persistence/query/jdo/*.java" />
        <include name="net/ontopia/persistence/query/sql/*.java" />
      </patternset>
    </javac>
  </target>

  <!-- ======================================================================
        Query engine
       ==================================================================== -->

  <!-- Patterns -->
  <patternset id="sources.query">
    <include name="net/ontopia/products/QueryEngine.java" />
    <include name="net/ontopia/topicmaps/query/core/*.java" />
    <include name="net/ontopia/topicmaps/query/parser/*.java" />
    <include name="net/ontopia/topicmaps/query/utils/*.java" />
    <include name="net/ontopia/topicmaps/query/impl/utils/*.java" />
    <include name="net/ontopia/topicmaps/query/impl/basic/*.java" />
    <include name="net/ontopia/topicmaps/query/impl/rdbms/*.java" />
    <include name="net/ontopia/topicmaps/query/spi/*.java" />
    <exclude name="net/ontopia/topicmaps/query/jdbc/*.java" />
  </patternset>

  <patternset id="classes.query">
    <include name="net/ontopia/products/QueryEngine.class" />
    <include name="net/ontopia/topicmaps/query/core/*.class" />
    <include name="net/ontopia/topicmaps/query/parser/*.class" />
    <include name="net/ontopia/topicmaps/query/utils/*.class" />
    <include name="net/ontopia/topicmaps/query/impl/utils/*.class" />
    <include name="net/ontopia/topicmaps/query/impl/basic/*.class" />
    <include name="net/ontopia/topicmaps/query/impl/rdbms/*.class" />
    <include name="net/ontopia/topicmaps/query/spi/*.class" />
    <exclude name="net/ontopia/topicmaps/query/jdbc/*.class" />
  </patternset>

  <patternset id="sources.test.query">
    <include name="net/ontopia/topicmaps/query/**/test/*.java" />
  </patternset>

  <patternset id="classes.test.query">
    <include name="net/ontopia/topicmaps/query/**/test/*.class" />
  </patternset>

  <target name="compile.query" depends="compile.engine">
    <echo>Compiling query engine classes...</echo>
    <antlr target="${java.path}/net/ontopia/topicmaps/query/parser/tolog.g" />
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.query" />
    </javac>
  </target>

  <target name="compile.test.query" depends="compile.test.engine,compile.query">
    <echo>Compiling query engine test cases...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.query" />
    </javac>
  </target>

  <target name="clean.query" depends="clean.engine">
    <echo>Cleaning up query engine classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.query" />
      </fileset>
    </delete>
  </target>

  <target name="clean.test.query" depends="clean.test.engine">
    <echo>Cleaning up query engine test classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.query" />
      </fileset>
    </delete>
  </target>

  <property name="dist.query.packagenames" value="
       net.ontopia.topicmaps.query.core, 
       net.ontopia.topicmaps.query.utils,
       net.ontopia.topicmaps.query.spi" />

  <property name="dev.query.packagenames" value="
       ${dist.query.packagenames}, 
       net.ontopia.topicmaps.query.parser,
       net.ontopia.topicmaps.query.impl.basic,
       net.ontopia.topicmaps.query.impl.rdbms, 
       net.ontopia.topicmaps.query.impl.utils, 
       net.ontopia.topicmaps.query.spi" />

  <target name="javadoc.query" depends="init">
    <delete dir="${build.javadoc}/query" />
    <mkdir dir="${build.javadoc}/query" />
    <javadoc packagenames="${dev.query.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/query" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Query Engine API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/query" />
  </target>

  <!-- ======================================================================
        Schema tools
       ==================================================================== -->

  <patternset id="sources.schema">
    <include name="net/ontopia/products/SchemaTools.java" />
    <include name="net/ontopia/topicmaps/schema/**/*.java" />
    <exclude name="net/ontopia/topicmaps/schema/**/test/*.java" />
  </patternset>

  <patternset id="classes.schema">
    <include name="net/ontopia/products/SchemaTools.class" />
    <include name="net/ontopia/topicmaps/schema/**/*.class" />
    <exclude name="net/ontopia/topicmaps/schema/**/test/*.class" />
  </patternset>

  <patternset id="sources.test.schema">
    <include name="net/ontopia/topicmaps/schema/**/test/*.java" />
  </patternset>

  <patternset id="classes.test.schema">
    <include name="net/ontopia/topicmaps/schema/**/test/*.class" />
  </patternset>

  <target name="compile.schema" depends="compile.engine">
    <echo>Compiling schema tools classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.schema" />
    </javac>
  </target>

  <target name="compile.test.schema" depends="compile.test.engine,compile.schema">
    <echo>Compiling schema tools test cases...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.schema" />
    </javac>
  </target>

  <target name="clean.schema" depends="clean.engine">
    <echo>Cleaning up schema tools classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.schema" />
      </fileset>
    </delete>
  </target>

  <property name="dist.schema.packagenames" value="
       net.ontopia.topicmaps.schema.core, 
       net.ontopia.topicmaps.schema.impl.osl,
       net.ontopia.topicmaps.schema.utils" />

  <property name="dev.schema.packagenames" value="
       ${dist.schema.packagenames}" />

  <target name="javadoc.schema" depends="init">
    <delete dir="${build.javadoc}/schema" />
    <mkdir dir="${build.javadoc}/schema" />
    <javadoc packagenames="${dev.schema.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/schema" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Schema Tools API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/schema" />
  </target>

  <!-- ======================================================================
        TMAPI support
       ==================================================================== -->

  <patternset id="sources.tmapi">
    <include name="net/ontopia/topicmaps/impl/oks2tmapi/**/*.java" />
  </patternset>

  <patternset id="classes.tmapi">
    <include name="net/ontopia/topicmaps/impl/oks2tmapi/**/*.class"/>
    <include name="META-INF/services/org.tmapi.core.TopicMapSystemFactory"/>
  </patternset>

  <patternset id="sources.test.tmapi">
    <include name="net/ontopia/topicmaps/impl/oks2tmapi/test/**/*.java"/>
  </patternset>

  <patternset id="classes.test.tmapi">
    <include name="net/ontopia/topicmaps/impl/oks2tmapi/test/**/*.class"/>
  </patternset>

  <target name="compile.tmapi" depends="init">
    <echo>Compiling TMAPI code...</echo>
    <mkdir dir="${build.classes}/META-INF/services"/>
    <copy file="${java.path}/net/ontopia/topicmaps/impl/oks2tmapi/tmsf.service" 
         tofile="${build.classes}/META-INF/services/org.tmapi.core.TopicMapSystemFactory"/>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" 
           deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}"
           classpathref="project.class.path" source="1.3">
      <patternset refid="sources.tmapi"/>
    </javac>
  </target>

  <target name="compile.test.tmapi" depends="compile.test.engine,compile.tmapi">
    <echo>Compiling TMAPI support test cases...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.test.tmapi" />
    </javac>
  </target>

  <target name="clean.tmapi" depends="init">
    <echo>Cleaning up TMAPI classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.tmapi" />
      </fileset>
    </delete>
  </target>

  <target name="jar.tmapi" depends="clean.tmapi,compile.tmapi">
    <echo>Creating TMAPI runtime jar file...</echo>
    <delete file="${build.jars}/ontopia-tmapi.jar"/>
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-tmapi.jar">
      <patternset refid="classes.tmapi"/>
    </jar>
  </target>

  <!-- ======================================================================
        Dummy log4j classes
       ==================================================================== -->

  <patternset id="sources.dummyLog4j">
    <include name="org/apache/log4j/*.java" />
    <include name="org/apache/log4j/spi/*.java" />
  </patternset>
  
  <patternset id="classes.dummyLog4j">
    <include name="org/apache/log4j/*.class" />
    <include name="org/apache/log4j/spi/*.class" />
  </patternset>

  <target name="compile.dummyLog4j" depends="init">
    <echo>Compiling dummy log4j classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" source="1.3">
      <patternset refid="sources.dummyLog4j" />
    </javac>
  </target>

  <target name="clean.dummyLog4j" depends="init">
    <echo>Cleaning up dummy log4j classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.dummyLog4j" />
      </fileset>
    </delete>
  </target>

  <!-- ======================================================================
        Vizigator
       ==================================================================== -->

  <patternset id="sources.viz">
    <include name="net/ontopia/products/Vizigator.java" />
    <include name="net/ontopia/topicmaps/viz/*.java" />
  </patternset>

    
  <patternset id="classes.viz">
    <include name="net/ontopia/products/Vizigator.class" />
    <include name="net/ontopia/topicmaps/viz/*.class" />
  </patternset>

  <patternset id="classes.vizlet">
    <patternset refid="classes.viz" />
  </patternset>

  <patternset id="classes.vizdesktop">
    <patternset refid="classes.viz" />
  </patternset>

  <patternset id="images.viz">
    <include name="net/ontopia/topicmaps/viz/logo.gif" />
  </patternset>

  <patternset id="resources.viz">
    <include name="net/ontopia/topicmaps/viz/messages.properties" />
    <include name="net/ontopia/topicmaps/viz/messages_*.properties" />
  </patternset>

  <target name="compile.viz" depends="init">
    <echo>Compiling viz classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path" source="1.3">
      <patternset refid="sources.viz" />
    </javac>
    <echo>Copying Vizigator Resources ... </echo>
    <!-- "About" image file -->
    <copy file="${java.path}/net/ontopia/topicmaps/viz/logo.gif" tofile="${build.classes}/net/ontopia/topicmaps/viz/logo.gif" />
    <!-- base nls support for Vizigator -->
    <copy todir="${build.classes}/net/ontopia/topicmaps/viz/" overwrite="yes">
      <fileset dir="${java.path}/net/ontopia/topicmaps/viz/">
        <patternset>
          <include name="messages.properties" />
          <include name="messages_*.properties" />
        </patternset>
      </fileset>
    </copy>
  </target>

  <target name="compile.vizlet" depends="init,compile.dummyLog4j">
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path.nolog4j" source="1.3">
      <patternset refid="sources.viz" />
    </javac>
    <echo>Compiling viz classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path.nolog4j">
      <patternset refid="sources.viz" />
    </javac>
    <echo>Copying Vizigator Resources ... </echo>
    <!-- "About" image file -->
    <copy file="${java.path}/net/ontopia/topicmaps/viz/logo.gif" tofile="${build.classes}/net/ontopia/topicmaps/viz/logo.gif" />
    <!-- base nls support for Vizigator -->
    <copy todir="${build.classes}/net/ontopia/topicmaps/viz/" overwrite="yes">
      <fileset dir="${java.path}/net/ontopia/topicmaps/viz/">
        <patternset>
          <include name="messages.properties" />
          <include name="messages_*.properties" />
        </patternset>
      </fileset>
    </copy>
  </target>      
      
  <target name="clean.viz" depends="init">
    <echo>Cleaning up viz classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.viz" />
      </fileset>
      <fileset dir="${build.classes}">
        <patternset refid="images.viz" />
      </fileset>
      <fileset dir="${build.classes}">
        <patternset refid="resources.viz" />
      </fileset>
    </delete>
  </target>

  <target name="jar.vizlet" depends="clean.viz,compile.vizlet,compile.navigator">
    <echo>Creating vizlet jar file...</echo>

    <unjar src="${3rdparty.path}/crimson.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/touchgraph.jar" dest="${build.tmp}" />

    <unjar src="${3rdparty.path}/backport-util-concurrent.jar" dest="${build.tmp}" />
    <delete dir="${build.tmp}/edu/emory/mathcs/backport/java/util/concurrent"/>
    <delete includeemptydirs="true">
      <fileset dir="${build.tmp}/edu/emory/mathcs/backport/java/util">
        <include name="concurrent/**"/>
        <include name="Array*"/>
        <include name="Deque*"/>
        <include name="Linked*"/>
        <include name="Priority*"/>
        <include name="Queue*"/>
      </fileset>
    </delete>

    <delete file="${build.jars}/ontopia-vizlet.jar" />
    <delete file="${build.jars}/signed-vizlet.jar" />

    <mkdir dir="${build.classes}/META-INF/services"/>
    <copy file="${java.path}/dist/vizigator/services/com.sun.org.apache.xerces.internal.xni.parser.XMLParserConfiguration" 
         todir="${build.classes}/META-INF/services"/>

    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-vizlet.jar">
      <patternset includes="META-INF/services/com.sun.org.apache.xerces.internal.xni.parser.XMLParserConfiguration"/>
      <patternset refid="classes.vizlet" />
      <patternset refid="resources.viz" />
      <patternset>
        <patternset refid="classes.engine"/>
        <exclude name="net/ontopia/topicmaps/entry/*.class"/>
        <exclude name="net/ontopia/topicmaps/utils/ltm/*.class"/>
        <exclude name="net/ontopia/topicmaps/utils/rdf/*.class"/>
        <exclude name="net/ontopia/topicmaps/utils/xfml/*.class"/>
        <exclude name="net/ontopia/topicmaps/xml/ISO13250*.class"/>
        <exclude name="net/ontopia/topicmaps/xml/XTMExporter.class"/>
        <exclude name="net/ontopia/topicmaps/xml/XTMTopicMapWriter.class"/>
        <exclude name="net/ontopia/topicmaps/xml/XTMFragmentExporter*.class"/>
        <exclude name="net/ontopia/topicmaps/xml/*Canonical*.class"/>
        <exclude name="net/ontopia/topicmaps/xml/XTMPathTopicMapSource*.class"/>
        <exclude name="net/ontopia/topicmaps/xml/XTMValidationHandler*.class"/>
        <!-- NOTE: some navigator classes are needed too -->
        <include name="net/ontopia/topicmaps/nav/utils/comparators/TopicComparator.class"/>
        <include name="net/ontopia/topicmaps/nav/utils/grabbers/ContextNameGrabber.class"/>
        <include name="net/ontopia/topicmaps/nav/utils/stringifiers/ComparatorNameStringifier.class"/>        
      </patternset>
      <patternset refid="classes.dummyLog4j"/>
      <fileset dir="${build.tmp}">
        <include name="**/*.class" />
      </fileset>
    </jar>

    <!-- create signed jar-file -->
    <echo>Signing vizlet jar-file...</echo>
    <exec executable="jarsigner">
      <arg value="-keystore" />
      <arg value="${java.path}/dist/signing/ontopiastore" />
      <arg value="-storepass" />
      <arg value="ontopia" />
      <arg value="-keypass" />
      <arg value="ontopia" />
      <arg value="-signedjar" />
      <arg value="${build.jars}/signed-vizlet.jar" />
      <arg value="${build.jars}/ontopia-vizlet.jar" />
      <arg value="signFiles" />
    </exec>

  </target>

  <target name="jar.vizdesk" depends="init">
    <echo>Creating vizdesk jar file...</echo>

    <unjar src="${3rdparty.path}/touchgraph.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/log4j.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/antlr.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/crimson.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/jena.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/jakarta-oro.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/jing.jar" dest="${build.tmp}" />
    <unjar src="${3rdparty.path}/commons-logging.jar" dest="${build.tmp}" />

    <delete file="${build.jars}/ontopia-vizdesk.jar" />
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-vizdesk.jar" manifest="${java.path}/dist/manifests/manifest-vizdesk.mf">
      <patternset refid="classes.vizdesktop" />
      <patternset refid="classes.engine" />
      <patternset refid="images.viz" />
      <patternset refid="resources.viz" />
      <fileset dir="${build.tmp}">
        <include name="**/*" />
      </fileset>
      <fileset dir="${build.classes}">
        <include name="net/ontopia/topicmaps/nav/utils/**/*.class" />
      </fileset>
    </jar>
  </target>

  <!-- ======================================================================
        TMTL interpreter
       ==================================================================== -->

  <patternset id="sources.tmtl">
    <include name="net/ontopia/topicmaps/tmtl/**/*.java" />
  </patternset>

  <patternset id="classes.tmtl">
    <include name="net/ontopia/topicmaps/tmtl/**/*.class" />
  </patternset>

  <patternset id="sources.test.tmtl">
  </patternset>

  <patternset id="classes.test.tmtl">
  </patternset>

  <target name="compile.tmtl" depends="compile.engine">
    <echo>Compiling TMTL interpreter...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset refid="sources.tmtl" />
    </javac>
  </target>

  <target name="compile.test.tmtl" depends="compile.test.engine,compile.tmtl">
    <echo>Compiling TMTL test cases...</echo>
  </target>

  <target name="clean.tmtl" depends="clean.engine">
    <echo>Cleaning up TMTL classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.tmtl" />
      </fileset>
    </delete>
  </target>

  <target name="jar.tmtl" depends="clean.tmtl,compile.tmtl">
    <echo>Creating TMTL runtime jar file...</echo>
    <delete file="${build.jars}/ontopia-tmtl.jar" />
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-tmtl.jar" manifest="${java.path}/dist/manifests/manifest-tmtl.mf">
      <patternset refid="classes.tmtl" />
      <patternset refid="classes.engine" />
      <patternset refid="classes.query" />
    </jar>
  </target>

  <target name="dist.tmtl" depends="jar.tmtl">
    <echo>Creating TMTL distribution...</echo>
    <property name="collect.path" value="${build.dists}/tmtl" />
    <property name="doc.path" value="${java.path}/../../doc" />

    <delete dir="${build.dists}/tmtl" />
    <mkdir dir="${build.dists}/tmtl" />
    <mkdir dir="${build.dists}/tmtl/doc" />
    <mkdir dir="${build.dists}/tmtl/lib" />

    <copy file="${java.path}/../../doc/developer/tmtl/distro-intro.html" tofile="${build.dists}/tmtl/index.html" overwrite="yes" />
    <copy file="${java.path}/../../doc/developer/query-lang/qlspec.html" todir="${build.dists}/tmtl/doc/" overwrite="yes" />
    <copy file="${java.path}/../../doc/developer/query-lang/tolog-tutorial.html" todir="${build.dists}/tmtl/doc/" overwrite="yes" />
    <copy file="${java.path}/../../doc/tech-reports/tmtl/tmtl.html" tofile="${build.dists}/tmtl/doc/tmtl.html" overwrite="yes" />
    <copy file="${build.jars}/ontopia-tmtl.jar" todir="${build.dists}/tmtl/lib" overwrite="yes" />

    <!-- Copy logo and stylesheet -->
    <copy file="${3rdparty.path}/images/logo.gif" todir="${collect.path}/doc" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${collect.path}/doc" />
    <copy file="${doc.path}/stylesheets/whitepapers.css" todir="${collect.path}" />

    <!-- Collect common jar files -->
    <copy file="${3rdparty.path}/jaxp.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/crimson.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/getopt.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/log4j.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/antlr.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/jing.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/jena.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/icu4j.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/xerces.jar" todir="${collect.path}/lib" />
    <copy file="${3rdparty.path}/commons-logging.jar" todir="${collect.path}/lib"/>

    <tar tarfile="${build.dists}/tmtl.tar" basedir="${build.dists}" includes="tmtl/**" />
    <gzip src="${build.dists}/tmtl.tar" zipfile="${build.dists}/tmtl.tar.gz" />
    <delete file="${build.dists}/tmtl.tar" />
  </target>

  <!-- ======================================================================
        IRC experiments
       ==================================================================== -->

  <patternset id="sources.irc">
    <include name="net/ontopia/net/irc/**/*.java" />
  </patternset>

  <patternset id="classes.irc">
    <include name="net/ontopia/net/irc/**/*.class" />
  </patternset>

  <target name="compile.irc" depends="compile.engine">
    <echo>Compiling IRC code...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset refid="sources.irc" />
    </javac>
  </target>

  <target name="clean.irc" depends="clean.engine">
    <echo>Cleaning up IRC classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.irc" />
      </fileset>
    </delete>
  </target>

  <target name="jar.irc" depends="clean.irc,compile.irc">
    <echo>Creating IRC runtime jar file...</echo>
    <delete file="${build.jars}/ontopia-irc.jar" />
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-irc.jar">
      <patternset refid="classes.irc" />
    </jar>
  </target>

  <!-- ======================================================================
        ContentStore
       ======================================================================-->

  <patternset id="sources.cstore">
    <include name="net/ontopia/infoset/content/*.java" />
  </patternset>

  <patternset id="classes.cstore">
    <include name="net/ontopia/infoset/content/*.class" />
  </patternset>

  <target name="compile.cstore" depends="compile.engine">
    <echo>Compiling cstore implementation classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}">
      <patternset refid="sources.cstore" />
    </javac>
  </target>

  <target name="clean.cstore" depends="init">
    <echo>Cleaning up cstore implementation classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.cstore" />
      </fileset>
    </delete>
  </target>

  <target name="jar.cstore" depends="compile.cstore">
    <jar basedir="${build.classes}" jarfile="${build.jars}/ontopia-cstore.jar" manifest="${java.path}/dist/manifests/manifest-cstore.mf">
      <patternset refid="classes.cstore" />
    </jar>
  </target>

  <property name="dev.cstore.packagenames" value="
       net.ontopia.infoset.content" />

  <target name="javadoc.cstore" depends="init">
    <delete dir="${build.javadoc}/cstore" />
    <mkdir dir="${build.javadoc}/cstore" />
    <javadoc packagenames="${dev.cstore.packagenames}" sourcepath="${java.path}" destdir="${build.javadoc}/cstore" author="true" version="true" use="true" public="true" windowtitle="Ontopia API documentation" doctitle="&lt;align=center&gt;Ontopia Content Store API documentation&lt;align=right&gt;&lt;img src='logo.gif'&gt;&lt;br&gt;&lt;br&gt;" bottom="&lt;i&gt;Copyright &#169; 2000-2009 &lt;a href='http://www.ontopia.net'&gt;Ontopia&lt;/a&gt;. All Rights Reserved.&lt;/i&gt;">
    </javadoc>
    <copy file="${3rdparty.path}/images/logo.gif" todir="${build.javadoc}/cstore" />
  </target>

  <!-- ======================================================================
        ContentStore tests
       ======================================================================-->

  <patternset id="sources.test.cstore">
    <include name="net/ontopia/infoset/content/test/*.java" />
  </patternset>

  <patternset id="classes.test.cstore">
    <include name="net/ontopia/infoset/content/test/*.class" />
  </patternset>

  <target name="compile.test.cstore" depends="compile.test.rdbms">
    <echo>Compiling test cases for content store...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="false" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset refid="sources.test.cstore" />
    </javac>
  </target>

  <target name="clean.test.cstore" depends="clean.test.engine">
    <echo>Cleaning up test cases for content store...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.test.cstore" />
      </fileset>
    </delete>
  </target>

  <!-- ======================================================================
        TMAPI TOLOG INTERFACE
       ====================================================================== -->

  <patternset id="sources.tmapi.tolog">
    <include name="net/ontopia/tmapi/query/*.java" />
  </patternset>

  <target name="javadoc.tmapi.tolog">
    <property name="whatever" value="net.ontopia.tmapi.query" />
    <javadoc packagenames="${whatever}" sourcepath="${java.path}" destdir="${build.javadoc}/tmapi" author="true" version="true" use="true" public="true" windowtitle="TMAPI tolog interrface">
    </javadoc>
  </target>

  <!-- ======================================================================
        XMLTOOLS DEMO APP    
       ====================================================================== -->
  <target name="jar.webapp.xmltools" depends="init">
    <echo>Creating xmltools jar file...</echo>
    <delete file="${build.jars}/xmltools.jar" />
    <jar jarfile="${build.jars}/xmltools.jar">
      <fileset dir="${build.classes}">
        <include name="net/ontopia/topicmaps/nav2/webapps/XmlTools*.class" />
      </fileset>
    </jar>
  </target>

  <target name="dist.webapp.xmltools" depends="jar.webapp.xmltools">
    <echo>Creating xmltools webapp distribution...</echo>
    <delete file="${build.dists}/xmltools.tar.gz" />
    <delete dir="${build.dists}/xmltools"/>
    <copy todir="${build.dists}/xmltools">
      <fileset dir="${src.path}/webapps/xmltools"/>
    </copy>
    <move tofile="${build.dists}/xmltools/WEB-INF/web.xml"
          file  ="${build.dists}/xmltools/WEB-INF/web.sandbox.xml"/>
    <mkdir dir="${build.dists}/xmltools/WEB-INF/topicmaps"/>
    <copy todir="${build.dists}/xmltools/WEB-INF/topicmaps"
          file ="${src.path}/webapps/omnigator/WEB-INF/topicmaps/xmltools.xtm"/>
    <mkdir dir="${build.dists}/xmltools/WEB-INF/lib"/>
    <copy todir="${build.dists}/xmltools/WEB-INF/lib"
          file ="${build.jars}/xmltools.jar"/>
    <copy todir="${build.dists}/xmltools/WEB-INF/lib"
          file ="${3rdparty.path}/standard.jar"/>
    <copy todir="${build.dists}/xmltools/WEB-INF/lib"
          file ="${3rdparty.path}/xalan.jar"/>
    <tar tarfile="${build.dists}/xmltools.tar" basedir="${build.dists}"
         includes="xmltools/**"/>
    <gzip src="${build.dists}/xmltools.tar" 
          zipfile="${build.dists}/xmltools.tar.gz" />
    <delete file="${build.dists}/xmltools.tar" />
  </target>

  <!-- ======================================================================
        JCOVERAGE STUFF
       ====================================================================== -->

  <!--path id="cobertura.classpath">
    <fileset dir="/Users/larsga/Desktop/cobertura-1.9">
      <include name="cobertura.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path-->
  <!--taskdef classpath="cobertura.classpath" resource="tasks.properties"/-->
  <!--taskdef classpath="jcoverage.jar" resource="tasks.properties"/-->

  <!--target name="cobertura.instrument" depends="init">
    <echo>Instrumenting classes</echo>
    <delete dir="${build.root}/instrumented-classes" />
    <cobertura-instrument todir="build/instrumented-classes">
      <fileset dir="build/classes">
        <patternset refid="classes.db2tm" />
      </fileset>
    </cobertura-instrument>
  </target-->

  <!--target name="jcoverage.instrument" depends="init">
    <echo>Instrumenting classes</echo>
    <delete dir="${build.root}/instrumented-classes" />
    <delete file="jcoverage.ser" />
    <instrument todir="build/instrumented-classes">
      <fileset dir="build/classes">
        <patternset refid="classes.query" />
      </fileset>
    </instrument>
  </target-->

  <!--target name="cobertura.report">
    <cobertura-report srcdir="." destdir="build/cobertura"/>
  </target-->

  <!--target name="jcoverage.report">
    <report srcdir="." destdir="build/jcoverage"/>
  </target>
-->

  <!-- ======================================================================
        jdbcspy
       ==================================================================== -->

  <!-- Patterns -->
  <patternset id="sources.jdbcspy">
    <include name="net/ontopia/persistence/jdbcspy/*.java" />
  </patternset>

  <patternset id="classes.jdbcspy">
    <include name="net/ontopia/persistence/jdbcspy/*.class" />
  </patternset>

  <target name="compile.jdbcspy" depends="init">
    <echo>Compiling jdbcspy classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset refid="sources.jdbcspy" />
    </javac>
  </target>

  <target name="clean.jdbcspy" depends="init">
    <echo>Cleaning up jdbcspy classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.jdbcspy" />
      </fileset>
    </delete>
  </target>

  <!-- ======================================================================
        OKS topic map realm
       ==================================================================== -->

  <!-- Patterns -->
  <patternset id="sources.topicmaprealm">
    <include name="net/ontopia/topicmaps/nav2/realm/*.java" />
  </patternset>

  <patternset id="classes.topicmaprealm">
    <include name="net/ontopia/topicmaps/nav2/realm/*.class" />
  </patternset>

  <target name="compile.topicmaprealm" depends="init">
    <echo>Compiling topicmaprealm classes...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" 
           deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" 
           classpathref="project.class.path" source="1.3">
      <patternset refid="sources.topicmaprealm" />
    </javac>
  </target>

  <target name="clean.topicmaprealm" depends="init">
    <echo>Cleaning up topicmaprealm classes...</echo>
    <delete>
      <fileset dir="${build.classes}">
        <patternset refid="classes.topicmaprealm" />
      </fileset>
    </delete>
  </target>

  <target name="jar.topicmaprealm" depends="compile.topicmaprealm">
    <jar basedir="${build.classes}" jarfile="${build.jars}/oks-realm.jar">
      <patternset refid="classes.topicmaprealm" />
    </jar>
  </target>

  <!-- ======================================================================
        XFire + TMRAP
       ====================================================================== -->

  <target name="jar.xfire.tmrap" depends="init">
    <javac srcdir="${java.path}" destdir="${build.classes}" 
           optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" 
           debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset>
        <include name="net/ontopia/topicmaps/utils/tmrap/XFireAdapter.java" />
      </patternset>
    </javac>
    <delete file="${3rdparty.path}/xfire-tmrap.jar" />
    <jar basedir="${build.classes}" jarfile="${3rdparty.path}/xfire-tmrap.jar">
      <patternset>
        <include name="net/ontopia/topicmaps/utils/tmrap/XFireAdapter*.class" />
      </patternset>
    </jar>
  </target>

  <!-- ======================================================================
        Clustering tests
       ======================================================================-->
  
  <!-- Note: to build call dist.jar.oks.enterprise.test -->

  <target name="distribute.cluster" depends="init">
    <echo>Building clustering test code...</echo>
    <antcall target="distribute.cluster.config" />
    <antcall target="distribute.cluster.code" />
  </target>

  <target name="distribute.cluster.config" depends="init">
    <echo>Copying clustering test configuration files to host ${hostname}...</echo>
    <exec executable="scp">
      <arg value="${java.path}/test-data/clustering/tm-sources.xml" />
      <arg value="${java.path}/test-data/clustering/tm-sources-force.xml" />
      <arg value="${java.path}/test-data/clustering/db.postgresql.props" />
      <arg value="${java.path}/test-data/clustering/db.oracle.props" />
      <arg value="${java.path}/test-data/clustering/oks-terracotta.xml" />
      <arg value="oks@${hostname}:/home/oks/" />
    </exec>
    <exec executable="scp">
      <arg value="${java.path}/test-data/clustering/dot_profile" />
      <arg value="oks@${hostname}:/home/oks/.profile" />
    </exec>
    <exec executable="scp">
      <arg value="${java.path}/test-data/clustering/postgresql.jar" />
      <arg value="oks@${hostname}:/home/oks/oks-enterprise/apache-tomcat/common/lib/" />
    </exec>
    <exec executable="scp" output="scp.log">
      <arg value="${java.path}/test-data/clustering/test01.jsp" />
      <arg value="${java.path}/test-data/clustering/test02.jsp" />
      <arg value="${java.path}/test-data/clustering/test03.jsp" />
      <arg value="oks@${hostname}:/home/oks/oks-enterprise/apache-tomcat/webapps/omnigator/" />
    </exec>
  </target>

  <target name="distribute.cluster.code" depends="init">
    <echo>Copying jar files to host ${hostname}...</echo>
    <exec executable="scp" output="scp.log">
      <arg value="${build.jars}/oks-enterprise.jar" />
      <arg value="${build.jars}/oks-enterprise-test.jar" />
      <arg value="oks@${hostname}:/home/oks/oks-enterprise/lib/" />
    </exec>
    <exec executable="scp" output="scp.log">
      <arg value="${build.jars}/oks-enterprise.jar" />
      <arg value="oks@${hostname}:/home/oks/oks-enterprise/apache-tomcat/common/lib/" />
    </exec>
  </target>

  <!-- ======================================================================
        Ontopoly model
       ==================================================================== -->

  <patternset id="sources.ontopoly">
    <include name="net/ontopia/topicmaps/nav2/webapps/ontopoly/sysmodel/*.java" />
  </patternset>
  <patternset id="classes.ontopoly">
    <include name="net/ontopia/topicmaps/nav2/webapps/ontopoly/sysmodel/*.class" />
  </patternset>
  <patternset id="sources.test.ontopoly">
    <include name="net/ontopia/topicmaps/nav2/webapps/ontopoly/sysmodel/test/*.java" />
  </patternset>
  <patternset id="classes.test.ontopoly">
    <include name="net/ontopia/topicmaps/nav2/webapps/ontopoly/sysmodel/test/*.class" />
  </patternset>

  <target name="compile.ontopoly" depends="compile.navigator">
    <echo>Compiling Ontopoly model...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset refid="sources.ontopoly" />
    </javac>
  </target>

  <target name="compile.test.ontopoly" depends="compile.test.navigator, compile.ontopoly">
    <echo>Compiling Ontopoly model tests...</echo>
    <javac srcdir="${java.path}" destdir="${build.classes}" optimize="${optimize}" deprecation="${deprecation}" debug="${debug}" debuglevel="${debuglevel}" classpathref="project.class.path">
      <patternset refid="sources.test.ontopoly" />
    </javac>
  </target>  
</project>
